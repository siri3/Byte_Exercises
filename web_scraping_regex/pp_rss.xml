<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Eric Holscher: One Percent for Open Source</title>
	<guid>http://ericholscher.com/blog/2018/mar/9/one-percent-for-open-source/</guid>
	<link>http://ericholscher.com/blog/2018/mar/9/one-percent-for-open-source/</link>
	<description>&lt;div class=&quot;section&quot; id=&quot;one-percent-for-open-source&quot;&gt;

&lt;p&gt;The open source ecosystem is the &lt;a class=&quot;reference external&quot; href=&quot;https://medium.com/@nayafia/open-source-was-worth-at-least-143m-of-instagram-s-1b-acquisition-808bb85e4681&quot;&gt;most valuable part&lt;/a&gt; of the software industry today.
From the programming languages to the web frameworks,
the operating system to the cryptography,
all software companies today use open source.&lt;/p&gt;
&lt;p&gt;Open source software is creating billions of dollars in value for companies and venture capitalists,
but it has a &lt;a class=&quot;reference external&quot; href=&quot;https://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/&quot;&gt;funding problem&lt;/a&gt; for itself.
There are not good ways for open source projects to capture the value that they create,
while being available for free and providing the fertile ecosystem that companies are built on today.&lt;/p&gt;
&lt;p&gt;There are many &lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/jdorfman/099954cffd018d0ca2037a1a0f86026f&quot;&gt;warning signs&lt;/a&gt; that open source is an ecosystem in danger.
Many people doing this work are &lt;a class=&quot;reference external&quot; href=&quot;https://thenewstack.io/darker-side-open-source/&quot;&gt;burning out&lt;/a&gt;,
&lt;a class=&quot;reference external&quot; href=&quot;https://www.drmaciver.com/2015/08/throwing-in-the-towel/&quot;&gt;giving up&lt;/a&gt;,
or just never getting involved in the first place.
We need to improve the sustainability of open source to protect the valuable ecosystem that we have built.&lt;/p&gt;
&lt;p&gt;We need a new funding model for open source.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;funding-the-open-source-ecosystem&quot;&gt;
&lt;h2&gt;Funding the Open Source Ecosystem&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;d like to propose an idea:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;A program called &lt;strong&gt;1% for open source&lt;/strong&gt;: where companies agree to invest 1% of their funding round or yearly profits into the open source software that they use.&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This is a win/win/win:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;Companies&lt;/strong&gt; invest in the tools that they use to &lt;em&gt;ensure continued development and support&lt;/em&gt;. The companies can also use their support of open source to make hiring good developers easier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open source projects&lt;/strong&gt; are able to &lt;em&gt;fund project management and maintenance&lt;/em&gt; that is required to make them sustainable for the long term. The project then continues to be a &lt;em&gt;force multiplier&lt;/em&gt; for the entire software industry.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ericholscher.com/blog/archive/tag/python/atom.xml#id1&quot;&gt;&lt;span class=&quot;problematic&quot; id=&quot;id2&quot;&gt;**&lt;/span&gt;&lt;/a&gt;Venture Capitalists ** invest in the open source ecosystem that makes companies &lt;em&gt;much cheaper to build&lt;/em&gt;. It&amp;#8217;s also &lt;em&gt;really good marketing&lt;/em&gt; for the VC firms, to show they are investing in our common infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;why-is-this-a-good-solution&quot;&gt;
&lt;h2&gt;Why is this a good solution?&lt;/h2&gt;
&lt;p&gt;The biggest reason is because all parties involved benefit from open source.
Having a concrete point in time also makes it much easier to define when the money should be invested.
It applies both to startups and established companies,
and mixes payments in terms of lump sums and yearly payments,
to make budgeting easier.&lt;/p&gt;
&lt;p&gt;We have tried &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Business_models_for_open-source_software&quot;&gt;many different methods&lt;/a&gt; of sustainability in open source,
but many of them are project specific and don&amp;#8217;t address the ecosystem.
Increasing investment in infrastructure across the entire industry is the only solution that will work in the long term.
My focus on this program is to &lt;strong&gt;increase the total revenue for the entire open source ecosystem&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A lot of places have &amp;#8220;Open Source Fridays&amp;#8221; and &amp;#8220;20% time&amp;#8221;,
but those programs are the first to be cut when a company has issues.
They also mix incentives,
where the work that gets done is more valuable to the company than the project.
We need a program that invests real money in the infrastructure that we use,
with the projects themselves choosing their own direction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how-should-we-implement-it&quot;&gt;
&lt;h2&gt;How should we implement it?&lt;/h2&gt;
&lt;p&gt;The company should invest 1% of the money into the open source projects that they use. There are many different ways this could be implemented.
A few of my ideas are:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Companies create a list of the OSS projects they use, using tools like &lt;a class=&quot;reference external&quot; href=&quot;http://libraries.io/&quot;&gt;http://libraries.io/&lt;/a&gt;, and then give money to the 10 largest projects that have a way to accept money. This could be done during the license compliance phase of the investment process.&lt;/li&gt;
&lt;li&gt;There could be a new non-profit foundation created, which gets all the donations and then has established criteria for how to reinvest the money as grants.&lt;/li&gt;
&lt;li&gt;You could give the money to the existing foundations that focus on the area of open source that is most valuable to you&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Making the execution of the investment standard is an important part of making this actually happen.
There should be standard processes and criteria for where your money will go,
so that it&amp;#8217;s not adding additional overhead to companies who give back.&lt;/p&gt;
&lt;p&gt;A simple example for a Python project could be:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;You give 1% of your VC investment to the Python Software Foundation&lt;/li&gt;
&lt;li&gt;You run a script that looks at all the projects in your &lt;cite&gt;requirements.txt&lt;/cite&gt; that your project depends on&lt;/li&gt;
&lt;li&gt;That list is cross-referenced with a list of the Python projects you use that need funding&lt;/li&gt;
&lt;li&gt;The top 10 projects you use that need funding, sorted by lowest amount received that year, are each given 10% of your investment as a sustainability grant&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;prior-art&quot;&gt;
&lt;h2&gt;Prior Art&lt;/h2&gt;
&lt;p&gt;I have a few sources of inspiration for this idea:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.onepercentfortheplanet.org/&quot;&gt;One Percent for the Planet&lt;/a&gt; - They ask established companies to give 1% of their revenue to help invest in the planet. This model for sustainability of an ecosystem was my inspiration here.&lt;/li&gt;
&lt;li&gt;Stripe&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;https://stripe.com/blog/open-source-retreat-2016&quot;&gt;open source retreat&lt;/a&gt; - where they fund projects to work on specific features.&lt;/li&gt;
&lt;li&gt;Mozilla&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;https://wiki.mozilla.org/MOSS&quot;&gt;open source support&lt;/a&gt;  - where they fund awards for projects that they use internally&lt;/li&gt;
&lt;li&gt;Coinbase&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;https://engineering.coinbase.com/introducing-coinbase-open-source-fund-116617a1f6ec&quot;&gt;open source fund&lt;/a&gt; - which is a monthly donation program&lt;/li&gt;
&lt;li&gt;Segment&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;https://open.segment.com/fellowship&quot;&gt;open fellowship&lt;/a&gt; - which gives 3 month fellowships, similar to Stripe&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;help-out&quot;&gt;
&lt;h2&gt;Help out&lt;/h2&gt;
&lt;p&gt;I was inspired to write up my thoughts because I tweeted the idea,
and it was well received:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;We should start a movement called &amp;quot;1% for OSS&amp;quot;, a program where VC's and startup companies agree to invest 1% of their funding round into the infrastructure that their companies rely on. &lt;a href=&quot;https://twitter.com/hashtag/sustain?src=hash&amp;ref_src=twsrc%5Etfw&quot;&gt;#sustain&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/sustainoss?src=hash&amp;ref_src=twsrc%5Etfw&quot;&gt;#sustainoss&lt;/a&gt;&lt;/p&gt;&amp;mdash; Eric Holscher (@ericholscher) &lt;a href=&quot;https://twitter.com/ericholscher/status/966845161194979328?ref_src=twsrc%5Etfw&quot;&gt;February 23, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&amp;#8217;t plan on actually building a new program for funding open source,
so please contact me if this is something that you&amp;#8217;d like to actually work on!
This is a viable option for funding large amounts of open source,
but it will require a lot of work.
I&amp;#8217;m happy to help,
but it will really take motivated people to execute on this idea and make it happen.&lt;/p&gt;
&lt;p&gt;I see the next steps being:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Figure out the exact process for determining who gets money from a project&lt;/li&gt;
&lt;li&gt;Figure out the proper entity to use (an existing non-profit, or a new one?)&lt;/li&gt;
&lt;li&gt;Find a willing VC or Company to do a test run&lt;/li&gt;
&lt;li&gt;Iterate on what you learn, establishing standard processes for the next test run&lt;/li&gt;
&lt;li&gt;Once you have a model that everyone is happy with, start expanding the program&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
	<pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Codementor: Machine Learning with Python: Easy and robust method to fit nonlinear data</title>
	<guid>https://www.codementor.io/tirthajyotisarkar/machine-learning-with-python-easy-and-robust-method-to-fit-nonlinear-data-hfgyw7i4f</guid>
	<link>https://www.codementor.io/tirthajyotisarkar/machine-learning-with-python-easy-and-robust-method-to-fit-nonlinear-data-hfgyw7i4f</link>
	<description>Easy and robust methodology for nonlinear data modeling using Python libraries, pipeline features, and regularization.</description>
	<pubDate>Thu, 08 Mar 2018 23:51:31 +0000</pubDate>
</item>
<item>
	<title>Codementor: 8 ways to perform simple linear regression and measure their speed using Python</title>
	<guid>https://www.codementor.io/tirthajyotisarkar/8-ways-to-perform-simple-linear-regression-and-measure-their-speed-using-python-hfgvs927x</guid>
	<link>https://www.codementor.io/tirthajyotisarkar/8-ways-to-perform-simple-linear-regression-and-measure-their-speed-using-python-hfgvs927x</link>
	<description>We discuss 8 ways to perform simple linear regression in Python ecosystem. We gloss over their pros and cons, and show their relative computational complexity measure.</description>
	<pubDate>Thu, 08 Mar 2018 23:43:00 +0000</pubDate>
</item>
<item>
	<title>Python Engineering at Microsoft: Python in Visual Studio Code – Feb 2018 Release</title>
	<guid>https://blogs.msdn.microsoft.com/pythonengineering/2018/03/08/python-in-visual-studio-code-feb-2018-release/</guid>
	<link>https://blogs.msdn.microsoft.com/pythonengineering/2018/03/08/python-in-visual-studio-code-feb-2018-release/</link>
	<description>&lt;p&gt;We are pleased to announce that the February 2018 release of the Python Extension for Visual Studio Code is now available from the marketplace and the gallery. You can the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.python&quot;&gt;download the Python extension&lt;/a&gt; from the marketplace, or install it directly from the extension gallery in Visual Studio Code. You can learn more about &lt;a href=&quot;https://code.visualstudio.com/docs/languages/python&quot;&gt;Python support in Visual Studio Code&lt;/a&gt; in the VS Code documentation.&lt;/p&gt;
&lt;p&gt;In this release have &lt;a href=&quot;https://github.com/Microsoft/vscode-python/milestone/3&quot;&gt;closed a total of 96 issues&lt;/a&gt; which have added support for pipenv/pyenv, a preview of the next version of our debugger offering faster Django debugging performance, and fixed some issues related to linting and flask debugging. You can see the full list of changes in this and previous releases in our &lt;a href=&quot;https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md&quot;&gt;changelog on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Support for pipenv and pyenv environments&lt;/h2&gt;
&lt;p&gt;There are several tools used by developers for installing and managing different Python versions and environments. The extension previously supported virtualenv and conda, and in this release also &lt;a href=&quot;https://code.visualstudio.com/docs/python/environments&quot;&gt;supports pipenv and pyenv&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pipenv is a popular new way to manage virtual environments when doing application development. It offers many benefits for application developers including the ability to separate development and production dependencies, and a centralized management of all pipenv environments on the system. If you use pipenv in a folder, VS code will automatically detect and use the pipenv environment as the selected interpreter:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/2018/03/1_pipenv.png&quot;&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/03/1_pipenv.png&quot; alt=&quot;&quot; width=&quot;867&quot; height=&quot;286&quot; class=&quot;size-full wp-image-1885 aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you choose to use pipenv in a folder, you will not &lt;em&gt;have the&lt;/em&gt; &lt;em&gt;ability to switch to other interpreters/environments&lt;/em&gt;. This is because pipenv is designed to control your entire folder, and not work with other interpreters/environments. If you want to use different environments, we recommend using a separate copy of that folder.&lt;/p&gt;
&lt;p&gt;On macOS and Linux, pyenv is a popular way install python versions on demand and switch to different python installations. Now VS Code will now be able to find python interpreters installed with pyenv.&lt;/p&gt;
&lt;h2&gt;Preview of ptvsd 4.0 debugger&lt;/h2&gt;
&lt;p&gt;Visual Studio Code uses ptvsd, the debug engine also used for the Python workload in Visual Studio. In this release we are experimenting with a new version of our debug engine based on PyDevD, with a basic set of debugging features and some early improvements over the previous version that we want to make available for you to try out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apps run faster with the debugger attached. With our &lt;a href=&quot;https://github.com/qubitron/stackoverflow-django&quot;&gt;sample stackoverflow-django app&lt;/a&gt; we observed up to a 3x speedup in loading Django pages.&lt;/li&gt;
&lt;li&gt;You can now debug flask templates:&lt;br /&gt;
&lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/2018/03/2_flaskdebugging.png&quot;&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/03/2_flaskdebugging.png&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;268&quot; class=&quot;size-full wp-image-1895 aligncenter&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can try out the new version of the debugger by taking the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use one of the experimental debugger configurations by clicking on &lt;em&gt;Debug&lt;/em&gt; &amp;gt; &lt;em&gt;Configure&lt;/em&gt; &amp;gt; &lt;em&gt;Add Configuration&lt;/em&gt; &amp;gt; &lt;em&gt;Python Experimental&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/2018/03/4_experimentaldebugger.png&quot;&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/03/4_experimentaldebugger.png&quot; alt=&quot;&quot; width=&quot;978&quot; height=&quot;342&quot; class=&quot;size-full wp-image-1875 aligncenter&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the &lt;em&gt;Python: Create Terminal&lt;/em&gt; command, and then type &lt;em&gt;pip install ptvsd --pre &lt;/em&gt;in the terminal to install the preview version of the debugger&lt;/li&gt;
&lt;li&gt;Click Start debugging!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Features supported include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launching applications&lt;/li&gt;
&lt;li&gt;Pause/Continue&lt;/li&gt;
&lt;li&gt;Basic breakpoints and stepping over/into/out&lt;/li&gt;
&lt;li&gt;Break on exception&lt;/li&gt;
&lt;li&gt;View/change call stack frames&lt;/li&gt;
&lt;li&gt;View local and global variables&lt;/li&gt;
&lt;li&gt;Conditional breakpoints&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Features not yet supported include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to&lt;/li&gt;
&lt;li&gt;Local and Remote Attach&lt;/li&gt;
&lt;li&gt;Django template debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this first preview we are expecting there to be some bugs, and we invite you to try it out and file any issues you find on the &lt;a href=&quot;https://github.com/Microsoft/vscode-python/milestone/3&quot;&gt;Python VS Code GitHub&lt;/a&gt; page.&lt;/p&gt;
&lt;h2&gt;Various improvements and fixes&lt;/h2&gt;
&lt;p&gt;We have also fixed a number of issues reported by users that should improve your experience working with Python in Visual Studio Code. The full list of improvements is listed in our &lt;a href=&quot;https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;, some notable improvements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installing Pylint was not working in virtual environments created with venv (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/404&quot;&gt;#404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Print statements were being incorrectly highlighted by Pylint (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/722&quot;&gt;#722&lt;/a&gt;), for now we’ve disabled this rule&lt;/li&gt;
&lt;li&gt;The default flask debugging templates disable auto-reload (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/573&quot;&gt;#573&lt;/a&gt;), meaning you can now set breakpoints in apps that are configured to have auto-reload&lt;/li&gt;
&lt;li&gt;Improvements to auto-indentation (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/481&quot;&gt;#481&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The performance of locating and selecting python interpreters has been improved (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/666&quot;&gt;#666&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The keyboard shortcut for formatting python code has been fixed, it was broken in the January release&lt;/li&gt;
&lt;li&gt;Multiple bugs caused .pylintrc files not to be used over the default pylint rules introduced in the January release (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/788&quot;&gt;#788&lt;/a&gt;, &lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/916&quot;&gt;#916&lt;/a&gt;, &lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/422&quot;&gt;#422&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The extension prevents against large runaway memory consumption from Jedi (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/263&quot;&gt;#263&lt;/a&gt;), after Jedi uses 1GB of ram we will automatically kill and restart the process. This can cause a temporary delay with displaying IntelliSense.&lt;/li&gt;
&lt;li&gt;Improvements to automatic whitespace formatting on enter (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/640&quot;&gt;#640&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Upgraded Jedi to 0.11.1 (&lt;a href=&quot;https://github.com/Microsoft/vscode-python/issues/674&quot;&gt;#674&lt;/a&gt;), fixing an installation problem preventing IntelliSense from working in virtual environments&lt;/li&gt;
&lt;li&gt;Added Chinese (Taiwan) zh-TW translation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Be sure to &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.python&quot;&gt;download the Python extension&lt;/a&gt; for VS Code now to try out the above improvements. If you run into any issues be sure to file an issue on the &lt;a href=&quot;https://github.com/Microsoft/vscode-python/milestone/3&quot;&gt;Python VS Code GitHub&lt;/a&gt; page.&lt;/p&gt;</description>
	<pubDate>Thu, 08 Mar 2018 19:13:03 +0000</pubDate>
</item>
<item>
	<title>PyCharm: Webinar: “Python Data Science with pandas” with Matt Harrison</title>
	<guid>http://feedproxy.google.com/~r/Pycharm/~3/Ve3koMu6LNg/</guid>
	<link>http://feedproxy.google.com/~r/Pycharm/~3/Ve3koMu6LNg/</link>
	<description>&lt;p&gt;Data science is the fastest-growing segment of the Python community and Python is the&lt;br /&gt;
de-facto language in data science. Well-known speaker and &lt;a href=&quot;https://www.amazon.com/Matt-Harrison/e/B0077BQLH6&quot;&gt;author&lt;/a&gt; &lt;a href=&quot;http://twitter.com/__mharrison__&quot;&gt;Matt Harrison&lt;/a&gt; joins us to discuss &lt;a href=&quot;https://pandas.pydata.org&quot;&gt;pandas&lt;/a&gt;, the hot-topic Python library for data science, and how to use it in a sample application.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuesday, March 20&lt;/li&gt;
&lt;li&gt;5:00PM-6:00PM CET (12PM Eastern Daylight, 9AM Pacific Daylight)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://info.jetbrains.com/PyCharm-Webinar-March2018.html&quot;&gt;Register here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://info.jetbrains.com/PyCharm-Webinar-March2018.html&quot;&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2018/03/r-3.png&quot; alt=&quot;r-3&quot; width=&quot;799&quot; height=&quot;541&quot; class=&quot;alignnone size-full wp-image-5440&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matt will provide a walkthrough through some of the features of pandas: data ingestion, cleaning, and adding columns. As a demo application to show Python and data science, Matt will analyze bitcoin price data, making a simple model to show whether the price of bitcoin would rise or fall.&lt;/p&gt;
&lt;h2&gt;Speaking to You&lt;/h2&gt;
&lt;p&gt;Matt (&lt;a href=&quot;http://www.metasnake.com&quot;&gt;MetaSnake, &lt;a href=&quot;http://twitter.com/__mharrison__&quot;&gt;@__mharrison__&lt;/a&gt;) has been using Python since 2000 in the areas of search, configuration management, storage, retail, and travel. He provides Python and Data Science training to corporations big and small. In addition, he has been teaching Python at PyCon, OSCON, Strata, and other venues.&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/Pycharm/~4/Ve3koMu6LNg&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Thu, 08 Mar 2018 15:05:19 +0000</pubDate>
</item>
<item>
	<title>Stack Abuse: Single Page Apps with Vue.js and Flask: RESTful API with Flask</title>
	<guid>http://stackabuse.com/single-page-apps-with-vue-js-and-flask-restful-api-with-flask/</guid>
	<link>http://stackabuse.com/single-page-apps-with-vue-js-and-flask-restful-api-with-flask/</link>
	<description>&lt;h3 id=&quot;restfulapiwithflask&quot;&gt;RESTful API with Flask&lt;/h3&gt;

&lt;img src=&quot;http://stackabuse.com/content/images/2018/03/single-page-apps-vue-and-flask-restful-api-flask.png&quot; alt=&quot;Single Page Apps with Vue.js and Flask: RESTful API with Flask&quot; /&gt;&lt;p&gt;Welcome to the fourth post on using Vue.js and Flask for full-stack web development. The focus of this post will be on building a backend REST API using the Python based Flask web framework.&lt;/p&gt;

&lt;p&gt;The code for this post is in a repo on &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://github.com/amcquistan/flask-vuejs-survey/tree/FourthPost&quot;&gt;my GitHub account&lt;/a&gt; under the branch &lt;em&gt;FourthPost&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;seriescontent&quot;&gt;Series Content&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackabuse.com/single-page-apps-with-vue-js-and-flask-setting-up-vue-js/&quot;&gt;Seup and Getting to Know VueJS&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackabuse.com/single-page-apps-with-vue-js-and-flask-navigating-vue-router/&quot;&gt;Navigating Vue Router&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackabuse.com/single-page-apps-with-vue-js-and-flask-state-management-with-vuex/&quot;&gt;State Management with Vuex&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;RESTful API with Flask &lt;em&gt;(you are here)&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;AJAX Integration with REST API  &lt;/li&gt;
&lt;li&gt;Authentication  &lt;/li&gt;
&lt;li&gt;Deployment to a Virtual Private Server&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;briefexplanationofflask&quot;&gt;Brief Explanation of Flask&lt;/h3&gt;

&lt;p&gt;Flask is a Python-based micro-framework for rapid prototyping and development of small to moderate size web applications. Flask has already been covered in a couple of prior posts &lt;a href=&quot;http://stackabuse.com/serving-static-files-with-flask/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://stackabuse.com/flask-vs-django/&quot;&gt;here&lt;/a&gt; on StackAbuse so, I will not be going into great detail pertaining to the basic or common parts of Flask. Instead I will be taking a more pragmatic approach focusing mostly on constructing a RESTful API to fuel the frontend with data, which I covered in the articles leading up to this one.&lt;/p&gt;

&lt;h3 id=&quot;scaffoldingoutthebackendprojectfiles&quot;&gt;Scaffolding out the Backend Project Files&lt;/h3&gt;

&lt;p&gt;I begin in the /backend directory by creating a Python3 &lt;a href=&quot;http://stackabuse.com/python-virtual-environments-explained/&quot;&gt;virtual environment&lt;/a&gt; and installing Flask and a few other necessary libraries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ python -m venv venv
$ source venv/bin/activate
(venv) $ pip install Flask Flask-SQLAlchemy Flask-Migrate Flask-Script requests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that makes Flask (and in large part the entire Python ecosystem) so awesome are the large number of well-designed packages available on &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://pypi.python.org/pypi&quot;&gt;PyPI&lt;/a&gt;. Below is a brief explanation of the libraries that I installed and their intended usage.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flask: Web micro framework&lt;/li&gt;
&lt;li&gt;Flask-SQLAlchemy: SQLAlchemy-based ORM with some Flask-specific awesome sauce packaged with it&lt;/li&gt;
&lt;li&gt;Flask-Migrate: Database migration library&lt;/li&gt;
&lt;li&gt;Flask-Script: Extremely useful package for interacting with a Flask application from the command line&lt;/li&gt;
&lt;li&gt;requests: a handy package for making network requests which I will use to test the REST API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the /backend directory I make a few new files called manage.py and appserver.py. Also, I will make a new directory inside of /backend that will become my &quot;surveyapi&quot; Flask application. Within the surveyapi directory I make the files __init__.py, models.py, application.py, and api.py. This results in a directory structure beginning at /backend like so (omitting the venv directory).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── manage.py
├── appserver.py
└── surveyapi
    ├── __init__.py
    ├── api.py
    ├── application.py
    ├── config.py
    └── models.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is a brief description of what each file is going to be used for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;manage.py: access to the Flask application instance for various Flask-Script commands&lt;/li&gt;
&lt;li&gt;appserver.py: start-up script for running the surveyapi application&lt;/li&gt;
&lt;li&gt;surveyapi/: the backend Flask application&lt;/li&gt;
&lt;li&gt;__init__.py: turns the surveyapi directory into a valid Python package&lt;/li&gt;
&lt;li&gt;api.py: for defining REST API route endpoints capable of consuming and producing JSON request and responses&lt;/li&gt;
&lt;li&gt;application.py: for creating an instance of the Flask application&lt;/li&gt;
&lt;li&gt;config.py: contains configuration settings for the Flask application&lt;/li&gt;
&lt;li&gt;models.py: for defining classes that will serve as data objects for the survey application such as Survey, Question, and Choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;creatinganapplicationfactory&quot;&gt;Creating an Application Factory&lt;/h3&gt;

&lt;p&gt;I will begin coding the surveyapi application by defining some settings inside of config.py like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
config.py  
- settings for the flask application object
&quot;&quot;&quot;

class BaseConfig(object):  
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///survey.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    # used for encryption and session management
    SECRET_KEY = 'mysecretkey'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This config class defines a &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; application database connection URI to a single file &lt;a href=&quot;http://stackabuse.com/stackabuse.com/a-sqlite-tutorial-with-python/&quot;&gt;SQLite database&lt;/a&gt; called survey.db. It also provides &lt;code&gt;SECRET_KEY&lt;/code&gt; config option that is used for encryption.&lt;/p&gt;

&lt;p&gt;Inside of application.py I will create what is known as an application factory function, which does exactly what it sounds like, it creates a Flask application instance. In addition to instantiating an instance of Flask it also sources the &lt;code&gt;BaseConfig&lt;/code&gt; object and registers the API routes blueprint I will make next.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
application.py  
- creates a Flask app instance and registers the database object
&quot;&quot;&quot;

from flask import Flask

def create_app(app_name='SURVEY_API'):  
    app = Flask(app_name)
    app.config.from_object('surveyapi.config.BaseConfig')
    from surveyapi.api import api
    app.register_blueprint(api, url_prefix=&quot;/api&quot;)
    return app
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;blueprintapi&quot;&gt;Blueprint API&lt;/h3&gt;

&lt;p&gt;Next I will move into the api.py module where I can define a &lt;code&gt;Blueprint&lt;/code&gt; object called &lt;code&gt;api&lt;/code&gt; containing RESTful routes. To keep things simple I will begin by just defining a simple view function called &lt;code&gt;say_hello()&lt;/code&gt; associated with the endpoint &lt;code&gt;/api/hello/&amp;lt;string:name&amp;gt;/&lt;/code&gt;. The &lt;code&gt;&amp;lt;string:name&amp;gt;&lt;/code&gt; portion of the url is a dynamic string variable that gets passed to the view function &lt;code&gt;say_hello(name)&lt;/code&gt; as a function parameter which I use in the JSON response message that gets returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
api.py  
- provides the API endpoints for consuming and producing
  REST requests and responses
&quot;&quot;&quot;

from flask import Blueprint, jsonify, request

api = Blueprint('api', __name__)

@api.route('/hello/&amp;lt;string:name&amp;gt;/')
def say_hello(name):  
    response = { 'msg': &quot;Hello {}&quot;.format(name) }
    return jsonify(response)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;devserverentrypointandvalidatingthesetup&quot;&gt;Dev Server Entry Point and Validating the Setup&lt;/h3&gt;

&lt;p&gt;To test this out I need to add a couple of lines of code in appserver.py to create an instance of the app. This enables me to fire up the Flask dev server by calling the &lt;code&gt;run()&lt;/code&gt; method on the &lt;code&gt;app&lt;/code&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
appserver.py  
- creates an application instance and runs the dev server
&quot;&quot;&quot;

if __name__ == '__main__':  
    from surveyapi.application import create_app
    app = create_app()
    app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the Flask dev server all I need to do is launch the Python interpreter and feed it the appserver.py script as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;(venv) $ python appserver.py
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 676-284-544
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to test the new endpoint, in a new terminal with the virtual environment activated, I will fire up a Python interpreter and make a GET request to &lt;code&gt;http://localhost:5000/api/hello/adam/&lt;/code&gt; using the &lt;code&gt;requests&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;(venv) $ python
&amp;gt;&amp;gt;&amp;gt; import requests
&amp;gt;&amp;gt;&amp;gt; response = requests.get('http://localhost:5000/api/hello/adam/')
&amp;gt;&amp;gt;&amp;gt; print(response.json())
{'msg': 'Hello adam'}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;definingthedatalayer&quot;&gt;Defining the Data Layer&lt;/h3&gt;

&lt;p&gt;Now that I have verified that I have a functioning Flask application scaffolded out I can focus on building out the data layer with the help of the Flask-SQLAlchemy ORM. Implementing a data layer will require writing some data classes inside of models.py such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Survey: this is the top level object that will contain one or more questions along with their choices&lt;/li&gt;
&lt;li&gt;Question: objects that belong to a survey object and contain choices&lt;/li&gt;
&lt;li&gt;Choice: objects that belong to a question and represent choices for the survey's question&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These data classes will poses fields that in large part will mimic the ones previously described in the articles on building the Vue.js frontend application, but these will map to database tables where their data will be persisted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
models.py  
- Data classes for the surveyapi application
&quot;&quot;&quot;

from datetime import datetime  
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Survey(db.Model):  
    __tablename__ = 'surveys'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    questions = db.relationship('Question', backref=&quot;survey&quot;, lazy=False)

    def to_dict(self):
        return dict(id=self.id,
                    name=self.name,
                    created_at=self.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    questions=[question.to_dict() for question in self.questions])

class Question(db.Model):  
    __tablename__ = 'questions'

    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.String(500), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    survey_id = db.Column(db.Integer, db.ForeignKey('surveys.id'))
    choices = db.relationship('Choice', backref='question', lazy=False)

    def to_dict(self):
        return dict(id=self.id,
                    text=self.text,
                    created_at=self.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    survey_id=self.survey_id,
                    choices=[choice.to_dict() for choice in self.choices])

class Choice(db.Model):  
    __tablename__ = 'choices'

    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.String(100), nullable=False)
    selected = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    question_id = db.Column(db.Integer, db.ForeignKey('questions.id'))

    def to_dict(self):
        return dict(id=self.id,
                    text=self.text,
                    created_at=self.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    question_id=self.question_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned previously, I am using the Flask-specific extension of SQLAlchemy called &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://flask-sqlalchemy.pocoo.org/2.3/&quot;&gt;Flask-SQLAlchemy&lt;/a&gt; to power the ORM for this application. I like Flask-SQLAlchemy because it has a fairly Pythonic API and it provides sensible defaults for defining and working with data classes.&lt;/p&gt;

&lt;p&gt;Each class inherits from the SQLAlchemy's &lt;code&gt;Model&lt;/code&gt; base class which provides intuitive and readable utility methods for interacting with the data stored in the database. Furthermore, each class is comprised of a series of class fields that are translated into database table fields as specified by the SQLAlchemy &lt;code&gt;Column&lt;/code&gt; class and associated type (ie, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, ...).&lt;/p&gt;

&lt;p&gt;You will also notice that each class has a common &lt;code&gt;to_dict()&lt;/code&gt; method. This method will come in handy for serializing the models' data into JSON when sending it over the wire to the frontend client.&lt;/p&gt;

&lt;p&gt;Next up on the list to do is to register the SQLAlchemy object, &lt;code&gt;db&lt;/code&gt;, with the Flask application object in application.py.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
application.py  
- creates a Flask app instance and registers the database object
&quot;&quot;&quot;

from flask import Flask

def create_app(app_name='SURVEY_API'):  
    app = Flask(app_name)
    app.config.from_object('surveyapi.config.BaseConfig')

    from surveyapi.api import api
    app.register_blueprint(api, url_prefix=&quot;/api&quot;)

    from surveyapi.models import db
    db.init_app(app)

    return app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final thing I would like to do is to bring together the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://flask-script.readthedocs.io/en/latest/&quot;&gt;Flask-Script&lt;/a&gt; and &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://flask-migrate.readthedocs.io/en/latest/&quot;&gt;Flask-Migrate&lt;/a&gt; extension packages inside the manage.py module to enable migrations. This handy module, manage.py, will pull together the data classes I just defined and link them to the application context along with the Flask-Migrate and Flask-Script machinery.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
manage.py  
- provides a command line utility for interacting with the
  application to perform interactive debugging and setup
&quot;&quot;&quot;

from flask_script import Manager  
from flask_migrate import Migrate, MigrateCommand

from surveyapi.application import create_app  
from surveyapi.models import db, Survey, Question, Choice

app = create_app()

migrate = Migrate(app, db)  
manager = Manager(app)

# provide a migration utility command
manager.add_command('db', MigrateCommand)

# enable python shell with application context
@manager.shell
def shell_ctx():  
    return dict(app=app,
                db=db,
                Survey=Survey,
                Question=Question,
                Choice=Choice)

if __name__ == '__main__':  
    manager.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am accomplishing two things in this bit of code above. First, I am creating an instance of the Flask application object so it provides context to the &lt;code&gt;Migrate(app, db)&lt;/code&gt; and &lt;code&gt;Manage(app)&lt;/code&gt; instances. Then I am adding a command to the &lt;code&gt;manager&lt;/code&gt; object that allows me to create and run migrations from the command line like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;(venv) $ python manage.py db init
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Initialize the migrations directory next to the surveyapi application and database file survey.db&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;(venv) $ python manage.py db migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create an initial migration file to translate the classes in models.py to SQL that will generate corresponding tables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;(venv) $ python manage.py db upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Run the migration to upgrade the database with the tables described in the prior step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last thing that I am doing in the manage.py module is creating another custom command utilizing &lt;code&gt;@manager.shell&lt;/code&gt; to decorate a &lt;code&gt;shell_ctx()&lt;/code&gt; function which returns a dict mapping keywords to the &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; objects along with the &lt;code&gt;Survey&lt;/code&gt;, &lt;code&gt;Question&lt;/code&gt; and, &lt;code&gt;Choice&lt;/code&gt; data classes.&lt;/p&gt;

&lt;p&gt;I will now take advantage of the usefulness of this shell utility command to demonstrate how to work with the Flask-SQLAlchemy ORM within the python interpreter it produces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;(venv) $ python manage.py shell
(venv) Adams-MacBook-Pro:backend adammcquistan$ python manage.py shell
&amp;gt;&amp;gt;&amp;gt; survey = Survey(name='Dogs')
&amp;gt;&amp;gt;&amp;gt; question = Question(text='What is your favorite dog?')
&amp;gt;&amp;gt;&amp;gt; question.choices = [Choice(text='Beagle'), Choice(text='Rottweiler'), Choice(text='Labrador')]
&amp;gt;&amp;gt;&amp;gt; question2 = Question(text='What is your second favorite dog?')
&amp;gt;&amp;gt;&amp;gt; question2.choices = [Choice(text='Beagle'), Choice(text='Rottweiler'), Choice(text='Labrador')]
&amp;gt;&amp;gt;&amp;gt; survey.questions = [question, question2]
&amp;gt;&amp;gt;&amp;gt; db.session.add(survey)
&amp;gt;&amp;gt;&amp;gt; db.session.commit()
&amp;gt;&amp;gt;&amp;gt; surveys = Survey.query.all()
&amp;gt;&amp;gt;&amp;gt; for s in surveys:
...     print('Survey(id={}, name={})'.format(s.id, s.name))
...     for q in s.questions:
...             print('  Question(id={}, text={})'.format(q.id, q.text))
...             for c in q.choices:
...                     print('    Choice(id={}, text={})'.format(c.id, c.text))
...
Survey(id=1, name=Dogs)  
  Question(id=1, text=What is your favorite dog?)
    Choice(id=1, text=Beagle)
    Choice(id=3, text=Labrador)
    Choice(id=2, text=Rottweiler)
  Question(id=2, text=What is your second favorite dog?)
    Choice(id=4, text=Beagle)
    Choice(id=6, text=Labrador)
    Choice(id=5, text=Rottweiler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats pretty slick, right?&lt;/p&gt;

&lt;p&gt;I'm not just talking about the elegant and readable syntax of the ORM, but the incredibly empowering ability to fire up a Python interpreter containing the application context to do quick little experiments with the models in your application. I cannot tell you how much of a productivity boost this has provided me when building out backend applications, and I seriously suggest you utilize it when doing the same.&lt;/p&gt;

&lt;h3 id=&quot;completingtherestfulapi&quot;&gt;Completing the RESTful API&lt;/h3&gt;

&lt;p&gt;Now that the data access layer is built I can focus my attention on completing the implementation necessary for the RESTful API. This is going to handle consuming and returning the application resources like the Survey, Question and Choice data. The use cases required of the RESTful API include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetch all surveys along with their questions and choices&lt;/li&gt;
&lt;li&gt;Fetch a single survey along with its questions and choices&lt;/li&gt;
&lt;li&gt;Create a new survey along with its specified questions and choices&lt;/li&gt;
&lt;li&gt;Update a survey's response choices once a survey has been taken&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start with I will go ahead and import all of the data classes along with the SQLAlchemy &lt;code&gt;db&lt;/code&gt; instance so I have access to them. At the top of api.py I add the following imports:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
api.py  
- provides the API endpoints for consuming and producing
  REST requests and responses
&quot;&quot;&quot;

from flask import Blueprint, jsonify, request  
from .models import db, Survey, Question, Choice  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As for the actual resource endpoints, I will start by coding up the ability to fetch all survey resources. Inside api.py I need to replace the &lt;code&gt;/hello/&amp;lt;string:name&amp;gt;/&lt;/code&gt; endpoint with the route  &lt;code&gt;/surveys/&lt;/code&gt; endpoint and &lt;code&gt;surveys()&lt;/code&gt; view function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;@api.route('/surveys/')
def surveys():  
    surveys = Survey.query.all()
    return jsonify({ 'surveys': [s.to_dict() for s in surveys] })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the dev server is still running then once I save the project files the server should automatically reload refreshing all the changes. If not, then running &lt;code&gt;(venv) $ python appserver.py&lt;/code&gt; will start the server. Now in another terminal with the virtual environment activated I can use the &lt;code&gt;requests&lt;/code&gt; package to test this new endpoint. However, I would like to share a pro-tip on displaying JSON responses in a more readable way by using another awesome Python package called &lt;em&gt;pprint&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;(venv) $ pip install pprint
(venv) $ python
&amp;gt;&amp;gt;&amp;gt; import pprint, requests
&amp;gt;&amp;gt;&amp;gt; pp == pprint.PrettyPrinter()
&amp;gt;&amp;gt;&amp;gt; resp = requests.get('http://localhost:5000/api/surveys/')
&amp;gt;&amp;gt;&amp;gt; pp.pprint(resp.json())
{'surveys': [{
     'created_at': '2018-03-06 03:52:44',
     'id': 1,
     'name': 'Dogs',
     'questions': [{
          'choices': [{
               'created_at': '2018-03-06 03:52:44',
               'id': 1,
               'question_id': 1,
               'text': 'Beagle'
              },{
               'created_at': '2018-03-06 03:52:44',
               'id': 3,
               'question_id': 1,
               'text': 'Labrador'
              },{
               'created_at': '2018-03-06 03:52:44',
               'id': 2,
               'question_id': 1,
               'text': 'Rottweiler'}],
            'created_at': '2018-03-06 03:52:44',
            'id': 1,
            'survey_id': 1,
            'text': 'What is your favorite dog?'
         },{
          'choices': [{
              'created_at': '2018-03-06 03:52:44',
              'id': 4,
              'question_id': 2,
              'text': 'Beagle'
             },{
              'created_at': '2018-03-06 03:52:44',
              'id': 6,
              'question_id': 2,
              'text': 'Labrador'
             },{
              'created_at': '2018-03-06 03:52:44',
              'id': 5,
              'question_id': 2,
              'text': 'Rottweiler'}],
          'created_at': '2018-03-06 03:52:44',
          'id': 2,
          'survey_id': 1,
          'text': 'What is your second favorite dog?'}]}
    ]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up I will implement the functionality to fetch a single survey by its &lt;code&gt;id&lt;/code&gt; with the URL endpoint &lt;code&gt;/surveys/id/&lt;/code&gt; and view function &lt;code&gt;survey(id)&lt;/code&gt;. Immediately following the &lt;code&gt;surveys()&lt;/code&gt; API view function I place the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;@api.route('/surveys/&amp;lt;int:id&amp;gt;/')
def survey(id):  
    survey = Survey.query.get(id)
    return jsonify({ 'survey': survey.to_dict() })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, I will save the files and test the new API endpoint to make sure it serves up a valid response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;&amp;gt;&amp;gt;&amp;gt; resp = requests.get('http://localhost:5000/api/surveys/1/')
&amp;gt;&amp;gt;&amp;gt; pp.pprint(resp.json())
{'survey': {
     'created_at': '2018-03-06 03:52:44',
     'id': 1,
     'name': 'Dogs',
     'questions': [{
          'choices': [{
               'created_at': '2018-03-06 03:52:44',
               'id': 1,
               'question_id': 1,
               'text': 'Beagle'
              },{
               'created_at': '2018-03-06 03:52:44',
               'id': 3,
               'question_id': 1,
               'text': 'Labrador'
              },{
               'created_at': '2018-03-06 03:52:44',
               'id': 2,
               'question_id': 1,
               'text': 'Rottweiler'}],
            'created_at': '2018-03-06 03:52:44',
            'id': 1,
            'survey_id': 1,
            'text': 'What is your favorite dog?'
         },{
          'choices': [{
              'created_at': '2018-03-06 03:52:44',
              'id': 4,
              'question_id': 2,
              'text': 'Beagle'
             },{
              'created_at': '2018-03-06 03:52:44',
              'id': 6,
              'question_id': 2,
              'text': 'Labrador'
             },{
              'created_at': '2018-03-06 03:52:44',
              'id': 5,
              'question_id': 2,
              'text': 'Rottweiler'}],
          'created_at': '2018-03-06 03:52:44',
          'id': 2,
          'survey_id': 1,
          'text': 'What is your second favorite dog?'}]}
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far I have only used the default HTTP GET route method suitable for fetching data from RESTful APIs. However, for the last two pieces of functionality I will need to utilize the HTTP POST and PUT methods for the endpoints &lt;code&gt;/api/surveys/&lt;/code&gt; and &lt;code&gt;/api/surveys/id/&lt;/code&gt;, respectively. I will use the HTTP POST method for creating new surveys and the HTTP PUT method for updating an existing survey with a new set of selected response choices.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;/api/surveys/&lt;/code&gt; route I will need to add a method parameter to the route declaration to specify that it accepts both GET and POST methods, &lt;code&gt;methods=('GET','POST')&lt;/code&gt;. In addition I will modify the body of the &lt;code&gt;surveys()&lt;/code&gt; view function to differentiate the method type and add the ability to save a new survey to the database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;@api.route('/surveys/', methods=('GET', 'POST'))
def fetch_surveys():  
    if request.method == 'GET':
        surveys = Survey.query.all()
        return jsonify({ 'surveys': [s.to_dict() for s in surveys] })
    elif request.method == 'POST':
        data = request.get_json()
        survey = Survey(name=data['name'])
        questions = []
        for q in data['questions']:
            question = Question(text=q['text'])
            question.choices = [Choice(text=c['text'])
                                for c in q['choices']]
            questions.append(question)
        survey.questions = questions
        db.session.add(survey)
        db.session.commit()
        return jsonify(survey.to_dict()), 201
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, I will want to save the project and test this to make sure I have a fully functional survey saving resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import json
&amp;gt;&amp;gt;&amp;gt; survey = {
...   'name': 'Cars',
...   'questions': [{
...     'text': 'What is your favorite car?',
...     'choices': [
...       { 'text': 'Corvette' },
...       { 'text': 'Mustang' },
...       { 'text': 'Camaro' }]
...   }, {
...     'text': 'What is your second favorite car?',
...     'choices': [
...       { 'text': 'Corvette' },
...       { 'text': 'Mustang' },
...       { 'text': 'Camaro' }]
...   }]
... }
&amp;gt;&amp;gt;&amp;gt; headers = {'Content-type': 'application/json'}
&amp;gt;&amp;gt;&amp;gt; resp = requests.post('http://localhost:5000/api/surveys/', headers=headers, data=json.dumps(survey))
&amp;gt;&amp;gt;&amp;gt; resp.status_code
201  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final piece to implement is the ability to update an existing survey with new survey response selections. Again, I will need to add the methods of GET and PUT to the &lt;code&gt;/api/surveys/id/&lt;/code&gt; route definition, &lt;code&gt;methods=('GET', 'PUT')&lt;/code&gt;. Then I update the &lt;code&gt;survey(id)&lt;/code&gt; view function to update the associated survey's question choices specified as being selected in the JSON body of the PUT request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;@api.route('/surveys/&amp;lt;int:id&amp;gt;/', methods=('GET', 'PUT'))
def survey(id):  
    if request.method == 'GET':
        survey = Survey.query.get(id)
        return jsonify({ 'survey': survey.to_dict() })
    elif request.method == 'PUT':
        data = request.get_json()
        for q in data['questions']:
            choice = Choice.query.get(q['choice'])
            choice.selected = choice.selected + 1
        db.session.commit()
        survey = Survey.query.get(data['id'])
        return jsonify(survey.to_dict()), 201
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, I need to save all my files and do one final test like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;&amp;gt;&amp;gt;&amp;gt; survey_choices = {
...   'id': 1,
...   'name': 'Dogs',
...   'questions': [
...     { 'id': 1, 'choice': 1 },
...     { 'id': 2, 'choice': 5 }]
... }
&amp;gt;&amp;gt;&amp;gt; headers = {'Content-type': 'application/json'}
&amp;gt;&amp;gt;&amp;gt; resp = requests.put('http://localhost:5000/api/surveys/1/', data=json.dumps(survey_choices), headers=headers)
&amp;gt;&amp;gt;&amp;gt; resp.status_code()
201  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Want to learn more about Python and building backend APIs? Try checking out a course like &lt;a class=&quot;udemy-link&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://stackabu.se/rest-apis-flask-python&quot;&gt;REST APIs with Flask and Python&lt;/a&gt; for a deeper dive in to backend web development with Python.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this article I have covered how to implement a simple, rather bare-bones, RESTful API using Flask according to the following table:&lt;/p&gt;

&lt;table class=&quot;table table-striped&quot;&gt;  
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Route&lt;/th&gt;
            &lt;th&gt;Method&lt;/th&gt;
            &lt;th&gt;Functionaility&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;/api/surveys/&lt;/td&gt;
            &lt;td&gt;GET&lt;/td&gt;
            &lt;td&gt;Retrieve all surveys&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;/api/surveys/&lt;/td&gt;
            &lt;td&gt;POST&lt;/td&gt;
            &lt;td&gt;Create a new survey&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;/api/surveys/id/&lt;/td&gt;
            &lt;td&gt;GET&lt;/td&gt;
            &lt;td&gt;Retrieve a survey by id&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;/api/surveys/id/&lt;/td&gt;
            &lt;td&gt;PUT&lt;/td&gt;
            &lt;td&gt;Update a survey's choice selections&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the next article I will be demonstrating how to integrate the frontend Vue.js application so that it can consume and push data updates to the Flask backend.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading and don't be shy about commenting or critiquing below.&lt;/p&gt;</description>
	<pubDate>Thu, 08 Mar 2018 14:45:00 +0000</pubDate>
</item>
<item>
	<title>Rene Dudfield: pygameweb - 0.0.4 - Northern Rockhopper Penguin</title>
	<guid>http://renesd.blogspot.com/2018/03/pygameweb-004-northern-rockhopper.html</guid>
	<link>http://renesd.blogspot.com/2018/03/pygameweb-004-northern-rockhopper.html</link>
	<description>&lt;div dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://github.com/pygame/pygameweb&quot;&gt;pygameweb&lt;/a&gt; is the source code for the &lt;a href=&quot;https://www.pygame.org/&quot; rel=&quot;nofollow&quot;&gt;pygame website&lt;/a&gt; at &lt;a href=&quot;https://www.pygame.org/&quot; rel=&quot;nofollow&quot;&gt;https://www.pygame.org/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-FsJRDONMYI4/WqEqNp8cFkI/AAAAAAAABI4/pq2Km11qj2IoRna-G2Jhda7Hzh2r_X5pACLcBGAs/s1600/6954251406_ed27093c48_o.jpg&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;213&quot; src=&quot;https://3.bp.blogspot.com/-FsJRDONMYI4/WqEqNp8cFkI/AAAAAAAABI4/pq2Km11qj2IoRna-G2Jhda7Hzh2r_X5pACLcBGAs/s320/6954251406_ed27093c48_o.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Northern Rockhopper Penguin &lt;a href=&quot;https://www.flickr.com/photos/briangratwicke/6954251406/in/photolist-bAwmEj-eihPBP-eihPEB-eioy7s-eihFEB-eijTDh-eie9kx-eie9s8-eikaeG-eihQqF-eioq9E-eioxRC-eihFxp-eioxUQ-eiknML-N7RLE1-eiopLy-TLNSDY-eihv1F-dhWw6P-dhWvpC-eijTeW-eihQut-eioyRw-eie92H-bPqVyr-dhWwY6-eioywS-eikohy-eihPT4-eihPJc-bPr1vp-eU7Eoh-eieDeT-eihPNF-eihuSx-eijtGC-eieD5n-eie9K6-eiopoA-eiopPd-eie9V2-eieCst-eieD2M-eioecy-eiopjY-eie9Bk-eieCTv-eihFrD-eidJL4&quot; rel=&quot;nofollow&quot;&gt;(photo by Brian Gratwicke)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;issue-link js-issue-link&quot; href=&quot;https://github.com/pygame/pygameweb/pull/52&quot;&gt;#52&lt;/a&gt; Adding ability to deploy through travisci. And docs.&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;issue-link js-issue-link tooltipped tooltipped-ne&quot; href=&quot;https://github.com/pygame/pygameweb/pull/46&quot;&gt;#46&lt;/a&gt; Wiki readability. Wiki tools on left out of reading line.&lt;/li&gt;&lt;li&gt;Twitter card for releases. For nicer view when posting to twitter.&lt;/li&gt;&lt;li&gt;Wiki table of contents improvements.&lt;/li&gt;&lt;li&gt;builds docs for pygame, when something lands on pygame github master branch.&lt;/li&gt;&lt;li&gt;project release feeds bugfix.&lt;/li&gt;&lt;li&gt;Only show one recent release for each project. Some projects release a few times in a row.&lt;/li&gt;&lt;li&gt;Wiki, nicer pre code handling.&lt;/li&gt;&lt;li&gt;Wiki code uses inline colors, so copy/paste works with colors too.&lt;/li&gt;&lt;li&gt;use https for login and register buttons, even when on http (see &lt;a href=&quot;http://renesd.blogspot.de/2018/02/why-cant-we-turn-off-http.html&quot; rel=&quot;nofollow&quot;&gt;Why can't we turn off HTTPS?&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Ask more bad robot web crawlers not to be bad.&lt;/li&gt;&lt;/ul&gt;See a full diff of &lt;a href=&quot;https://github.com/pygame/pygameweb/compare/0.0.1...0.0.4&quot;&gt;changes since last release&lt;/a&gt;.&lt;/div&gt;</description>
	<pubDate>Thu, 08 Mar 2018 12:42:07 +0000</pubDate>
</item>
<item>
	<title>EuroPython: EuroPython 2018: Our conference logo</title>
	<guid>https://blog.europython.eu/post/171656128512</guid>
	<link>https://blog.europython.eu/post/171656128512</link>
	<description>&lt;p&gt;After intense work with &lt;a href=&quot;http://simetriko.com/&quot; target=&quot;_blank&quot;&gt;our designer&lt;/a&gt;, we are happy to present the logo for the EuroPython 2018 conference:&lt;/p&gt;&lt;img src=&quot;https://78.media.tumblr.com/a9d6626f7247e21bdc2f705430826dde/tumblr_inline_p59qmsXwHj1swlzyf_540.png&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;The colors and patterns are a play on Scottish kilts, referring to the location, and a theatre curtain, representing the many presentations we’ll have at the conference.&lt;/p&gt;&lt;p&gt;We hope you like it as much as we do.&lt;/p&gt;&lt;p&gt;

Enjoy,&lt;br /&gt;–&lt;br /&gt;EuroPython 2018 Team&lt;br /&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fep2018.europython.eu%2F&amp;t=NmFhYzdhYmNjNmU3YjM5MmM2N2YwZjEzZGY3MmQwZWMzYTc3OThhYixZZEVNdFlWaQ%3D%3D&amp;b=t%3AB0vrbLjN_ChFWUFhotggrw&amp;p=https%3A%2F%2Fblog.europython.eu%2Fpost%2F170649247077%2Feuropython-2018-getting-ready&amp;m=0&quot; target=&quot;_blank&quot;&gt;https://ep2018.europython.eu/&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.europython-society.org%2F&amp;t=MThjMTIzY2QyNzkzOGEyMWY5YWMwMjBmMWU1ZmViOTc3YjMzZTI4MixZZEVNdFlWaQ%3D%3D&amp;b=t%3AB0vrbLjN_ChFWUFhotggrw&amp;p=https%3A%2F%2Fblog.europython.eu%2Fpost%2F170649247077%2Feuropython-2018-getting-ready&amp;m=0&quot; target=&quot;_blank&quot;&gt;https://www.europython-society.org/&lt;/a&gt;

&lt;br /&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 08 Mar 2018 11:56:14 +0000</pubDate>
</item>
<item>
	<title>EuroPython: EuroPython 2018: Hotel tips and general update</title>
	<guid>https://blog.europython.eu/post/171656119532</guid>
	<link>https://blog.europython.eu/post/171656119532</link>
	<description>&lt;p&gt;As you may know, the Edinburgh Fringe Festival is starting one week after EuroPython 2018 in Edinburgh. Since this typically attracts many thousands of people and artists, the hotels are filling up quickly in Edinburgh.&lt;/p&gt;&lt;p&gt;If you’re planning to attend EuroPython, please book your hotel early. Many booking sites offer free cancellations, so there’s no risk in making reservations now, even if you decide not to come in the end.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Room allocation for EuroPython 2018&lt;/b&gt;&lt;/p&gt;&lt;p&gt;To help with this, we have partnered with the &lt;a href=&quot;http://conventionedinburgh.com/&quot; target=&quot;_blank&quot;&gt;Edinburgh Convention Bureau&lt;/a&gt; to set aside a number of hotel rooms which are reserved for EuroPython attendees. These rooms will be held reserved until a few weeks before the conference and are also available with a free cancellation option.&lt;/p&gt;&lt;p&gt;The 

Edinburgh Convention Bureau has setup the following website for booking rooms from this allocation:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://cabsedinburgh.eventsair.com/QuickEventWebsitePortal/europython-2018/home-page&quot; target=&quot;_blank&quot;&gt;EuroPython 2018 Hotel Booking Website&lt;/a&gt;&lt;br /&gt;(run by the Edinburgh Convention Bureau)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;Update on EuroPython 2018&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Meanwhile, we wanted to give you an update of where we are with the conference organization:&lt;/p&gt;&lt;p&gt;We are still working on getting everything setup for launching the website, opening ticket sales and the Call for Proposals (CFP).&lt;/p&gt;&lt;p&gt;This year the EuroPython Society (EPS) will  be running the ticket sales, rather than a local organization and we are facing some challenges related to VAT taxes, which are taking longer to sort out than expected.&lt;/p&gt;&lt;p&gt;This is the main reason for the delay you are seeing, but we’re getting there.&lt;/p&gt;&lt;p&gt;

Enjoy,&lt;br /&gt;–&lt;br /&gt;EuroPython 2018 Team&lt;br /&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fep2018.europython.eu%2F&amp;t=NmFhYzdhYmNjNmU3YjM5MmM2N2YwZjEzZGY3MmQwZWMzYTc3OThhYixZZEVNdFlWaQ%3D%3D&amp;b=t%3AB0vrbLjN_ChFWUFhotggrw&amp;p=https%3A%2F%2Fblog.europython.eu%2Fpost%2F170649247077%2Feuropython-2018-getting-ready&amp;m=0&quot; target=&quot;_blank&quot;&gt;https://ep2018.europython.eu/&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.europython-society.org%2F&amp;t=MThjMTIzY2QyNzkzOGEyMWY5YWMwMjBmMWU1ZmViOTc3YjMzZTI4MixZZEVNdFlWaQ%3D%3D&amp;b=t%3AB0vrbLjN_ChFWUFhotggrw&amp;p=https%3A%2F%2Fblog.europython.eu%2Fpost%2F170649247077%2Feuropython-2018-getting-ready&amp;m=0&quot; target=&quot;_blank&quot;&gt;https://www.europython-society.org/&lt;/a&gt;

&lt;/p&gt;</description>
	<pubDate>Thu, 08 Mar 2018 11:55:43 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python *args and **kwargs</title>
	<guid>https://www.programiz.com/python-programming/args-and-kwargs</guid>
	<link>https://www.programiz.com/python-programming/args-and-kwargs</link>
	<description>In this article, we will learn about Python *args and **kwargs ,their uses and functions with examples.</description>
	<pubDate>Thu, 08 Mar 2018 09:37:24 +0000</pubDate>
</item>
<item>
	<title>Test and Code: 37: What tests to write first</title>
	<guid>http://testandcode.com/37</guid>
	<link>http://testandcode.com/37</link>
	<description>&lt;p&gt;This episode starts down the path of test strategy with the first tests to write in either a legacy system or a project just getting off it's feet.&lt;/p&gt;

&lt;p&gt;We cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My approach to testing existing systems.&lt;/li&gt;
&lt;li&gt;Put names to strategies so we can refer to them later.&lt;/li&gt;
&lt;li&gt;Explain the strategies in general terms and explain why they are useful.&lt;/li&gt;
&lt;li&gt;Discuss how these strategies are used in an example project. (The code is available on github).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strategies covered today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dog Fooding&lt;/li&gt;
&lt;li&gt;Exploratory Testing&lt;/li&gt;
&lt;li&gt;Tracer Bullet Tests&lt;/li&gt;
&lt;li&gt;Act Like A Customer (ALAC) Tests&lt;/li&gt;
&lt;li&gt;Manual Procedures&lt;/li&gt;
&lt;li&gt;Initial automated tests at 2 levels, API and UI.&lt;/li&gt;
&lt;/ul&gt;&amp;lt;p&amp;gt;This episode starts down the path of test strategy with the first tests to write in either a legacy system or a project just getting off it&amp;amp;#39;s feet.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;We cover:&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;My approach to testing existing systems.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Put names to strategies so we can refer to them later.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Explain the strategies in general terms and explain why they are useful.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Discuss how these strategies are used in an example project. (The code is available on github).&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;Strategies covered today:&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Dog Fooding&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Exploratory Testing&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Tracer Bullet Tests&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Act Like A Customer (ALAC) Tests&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Manual Procedures&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Initial automated tests at 2 levels, API and UI.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description>
	<pubDate>Thu, 08 Mar 2018 07:45:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: Python Project for Beginners: Bitcoin Price Notifications</title>
	<guid>https://realpython.com/blog/python/python-bitcoin-ifttt/</guid>
	<link>https://realpython.com/blog/python/python-bitcoin-ifttt/</link>
	<description>&lt;p&gt;Welcome to the first article in a series of articles on Python projects for beginners!&lt;/p&gt;
&lt;p&gt;In this tutorial we&amp;rsquo;re going to build a Bitcoin price notification service&amp;mdash;&lt;/p&gt;
&lt;p&gt;During this project you&amp;rsquo;ll learn about HTTP requests and how to send them using the (appropriately named) &lt;code&gt;requests&lt;/code&gt; package. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re going to learn about webhooks and how you can use them to connect your Python app to external services, such as phone notifications or Telegram messages.&lt;/p&gt;
&lt;p&gt;With relatively little code (~50 lines) you&amp;rsquo;re going to arrive at a full-fledged Bitcoin price notification service that will be easily extendable to other cryptocurrencies and services.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s jump right in:&lt;/p&gt;
&lt;h2 id=&quot;bitcoin-price-notifications-with-python&quot;&gt;Bitcoin Price Notifications With Python&lt;/h2&gt;
&lt;p&gt;As we all know, Bitcoin price is a fickle thing. You never really know where it’s going to be at the end of the day. So, instead of constantly checking various sites for the latest updates, let&amp;rsquo;s make a Python app to do the work for you.&lt;/p&gt;
&lt;p&gt;For this, we&amp;rsquo;re going to use the popular automation website &lt;a href=&quot;https://ifttt.com&quot;&gt;IFTTT&lt;/a&gt;. IFTTT (&amp;ldquo;if this, then that&amp;rdquo;) is a web service that bridges the gap between different apps and devices. &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to create two IFTTT applets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One for emergency notification when Bitcoin price falls under a certain threshold; and &lt;/li&gt;
&lt;li&gt;another for regular &lt;a href=&quot;https://telegram.org/&quot;&gt;Telegram&lt;/a&gt; updates on the Bitcoin price. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both will be triggered by our Python app which will consume the data from the &lt;a href=&quot;https://coinmarketcap.com/api/&quot;&gt;Coinmarketcap API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An IFTTT applet is composed of two parts: a trigger and an action. &lt;/p&gt;
&lt;p&gt;In our case, the trigger will be a webhook service provided by IFTTT. You can think of webhooks as &amp;ldquo;user-defined HTTP callbacks&amp;rdquo; and you can read more about
them &lt;a href=&quot;http://timothyfitz.com/2009/02/09/what-webhooks-are-and-why-you-should-care/&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Our Python app will make an HTTP request to the webhook URL which will trigger an action. Now, this is the fun part&amp;mdash;the action could be almost anything you want. IFTTT offers a multitude of actions like sending an email, updating a Google Spreadsheet and even calling your phone.&lt;/p&gt;
&lt;h2 id=&quot;project-setup&quot;&gt;Project Setup&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start by setting up a &lt;a href=&quot;https://realpython.com/blog/python/python-virtual-environments-a-primer/&quot;&gt;virtual environment&lt;/a&gt;.
Run this command to get a new Python 3 virtual environment:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkvirtualenv -p &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;which python3&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; bitcoin_notifications
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before continuing you have to activate the virtual environment and install the required dependencies:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; workon bitcoin_notifications  &lt;span class=&quot;c1&quot;&gt;# To activate the virtual environment&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; pip install &lt;span class=&quot;nv&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;.18.4  &lt;span class=&quot;c1&quot;&gt;# We only need the requests package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can deactivate the virtual environment by running the &lt;code&gt;deactivate&lt;/code&gt; shell command.&lt;/p&gt;
&lt;h2 id=&quot;retrieving-the-bitcoin-price&quot;&gt;Retrieving the Bitcoin Price&lt;/h2&gt;
&lt;p&gt;Time to get our hands dirty. We can start by getting the latest price from the Coinmarketcap API in the Python console:&lt;/p&gt;
&lt;p&gt;First, we have to import the &lt;code&gt;requests&lt;/code&gt; module and define the &lt;code&gt;bitcoin_api_url&lt;/code&gt; variable which contains the Coinmarketcap API URL for Bitcoin. &lt;/p&gt;
&lt;p&gt;Next, we send an HTTP GET request to the URL using the &lt;code&gt;requests.get()&lt;/code&gt; function and save the response. Since the API returns a JSON response, we can convert it to a Python object by calling the &lt;code&gt;.json()&lt;/code&gt; function on the response. As you can see, the API returned a list with one element containing the Bitcoin price data:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_api_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://api.coinmarketcap.com/v1/ticker/bitcoin/'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_api_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The API returns a list&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'list'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Bitcoin data is the first element of the list&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{'id': 'bitcoin', 'name': 'Bitcoin', 'symbol': 'BTC', 'rank': '1', &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 'price_usd': '10226.7', 'price_btc': '1.0', '24h_volume_usd': '7585280000.0',&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 'market_cap_usd': '172661078165', 'available_supply': '16883362.0', &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 'total_supply': '16883362.0', 'max_supply': '21000000.0', &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 'percent_change_1h': '0.67', 'percent_change_24h': '0.78', &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; 'percent_change_7d': '-4.79', 'last_updated': '1519465767'}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The property that we&amp;rsquo;re most interested in is &lt;code&gt;'price_usd'&lt;/code&gt;&amp;mdash;the Bitcoin price in US dollars.&lt;/p&gt;
&lt;h2 id=&quot;sending-a-test-ifttt-notification&quot;&gt;Sending a Test IFTTT Notification&lt;/h2&gt;
&lt;p&gt;Now we can move onto the IFTTT side of things. To use IFTTT you&amp;rsquo;ll first need to &lt;a href=&quot;https://ifttt.com/join&quot;&gt;set up a new account&lt;/a&gt; and install their mobile app (if you want to receive phone notifications from your Python app). Once you set that up, we&amp;rsquo;re going to &lt;a href=&quot;https://ifttt.com/create&quot;&gt;create&lt;/a&gt; a new IFTTT applet for testing purposes.&lt;/p&gt;
&lt;p&gt;To create a new test applet follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on the big &lt;em&gt;&amp;ldquo;this&amp;rdquo;&lt;/em&gt; button&lt;/li&gt;
&lt;li&gt;Search for the &lt;em&gt;&amp;ldquo;webhooks&amp;rdquo;&lt;/em&gt; service and select the &lt;em&gt;&amp;ldquo;Receive a web request&amp;rdquo;&lt;/em&gt; trigger&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s name the event &lt;code&gt;test_event&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now select the big &lt;em&gt;&amp;ldquo;that&amp;rdquo;&lt;/em&gt; button&lt;/li&gt;
&lt;li&gt;Search for the &lt;em&gt;&amp;ldquo;notifications&amp;rdquo;&lt;/em&gt; service and select the &lt;em&gt;&amp;ldquo;Send a notification from the IFTTT app&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Change the message to &lt;code&gt;I just triggered my first IFTTT action!&lt;/code&gt; and click on &lt;em&gt;&amp;ldquo;Create action&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;em&gt;&amp;ldquo;Finish&amp;rdquo;&lt;/em&gt; button and we&amp;rsquo;re done&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To see the documentation on how to use the IFTTT webhooks go to this &lt;a href=&quot;https://ifttt.com/maker_webhooks&quot;&gt;page&lt;/a&gt; and click on the &lt;em&gt;&amp;ldquo;Documentation&amp;rdquo;&lt;/em&gt; button in the top right corner. The documentation page contains the webhook URL and it looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://maker.ifttt.com/trigger/{event}/with/key/{your-IFTTT-key}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next up, you&amp;rsquo;ll need to substitute the &lt;code&gt;{event}&lt;/code&gt; part with whatever name you gave our event in step 3, when you created the applet. The &lt;code&gt;{your-IFTTT-key}&lt;/code&gt; part is already populated with your IFTTT key.&lt;/p&gt;
&lt;p&gt;Now copy the webhook URL and start another Python console. Again we import the &lt;code&gt;requests&lt;/code&gt; module and define the webhook URL variable. Now we just have to send an HTTP POST request to the IFTTT webhook URL using the &lt;code&gt;requests.post()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Make sure that your key is in the URL&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifttt_webhook_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maker.ifttt.com/trigger/test_event/with/key/{your-IFTTT-key}'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifttt_webhook_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;Response [200]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After running the last line you should see a notification on your phone:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/ifttt_test_notification.7384c7562c30.jpg&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/ifttt_test_notification.7384c7562c30.jpg&quot; width=&quot;1440&quot; height=&quot;328&quot; alt=&quot;Python + IFTTT: Test Notification&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;creating-ifttt-applets&quot;&gt;Creating IFTTT Applets&lt;/h2&gt;
&lt;p&gt;Now we&amp;rsquo;re finally ready for the main part. Before starting with the code we need to create two new IFTTT applets: one for emergency Bitcoin
price notifications and one for regular updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emergency bitcoin price notification applet:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose the &lt;em&gt;&amp;ldquo;webhooks&amp;rdquo;&lt;/em&gt; service and select the &lt;em&gt;&amp;ldquo;Receive a web request&amp;rdquo;&lt;/em&gt; trigger&lt;/li&gt;
&lt;li&gt;Name the event &lt;code&gt;bitcoin_price_emergency&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For the action select the &lt;em&gt;&amp;ldquo;Notifications&amp;rdquo;&lt;/em&gt; service and select the &lt;em&gt;&amp;ldquo;Send a rich notification from the IFTTT app&amp;rdquo;&lt;/em&gt; action&lt;/li&gt;
&lt;li&gt;Give it a title, like &lt;em&gt;&amp;ldquo;Bitcoin price emergency!&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Set the message to &lt;code&gt;Bitcoin price is at ${{Value1}}. Buy or sell now!&lt;/code&gt; (we&amp;rsquo;ll return to the &lt;code&gt;{{Value1}}&lt;/code&gt; part later on)&lt;/li&gt;
&lt;li&gt;Optionally you could add a Link URL to the Coinmarketcap Bitcoin page: &lt;code&gt;https://coinmarketcap.com/currencies/bitcoin/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create the action and finish setting up the applet&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Regular price updates applet:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Again choose the &lt;em&gt;&amp;ldquo;webhooks&amp;rdquo;&lt;/em&gt; service and select the &lt;em&gt;&amp;ldquo;Receive a web request&amp;rdquo;&lt;/em&gt; trigger&lt;/li&gt;
&lt;li&gt;Name the event &lt;code&gt;bitcoin_price_update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For the action select the &lt;em&gt;&amp;ldquo;Telegram&amp;rdquo;&lt;/em&gt; service and select the &lt;em&gt;&amp;ldquo;Send message&amp;rdquo;&lt;/em&gt; action&lt;/li&gt;
&lt;li&gt;Set the message text to: &lt;code&gt;Latest bitcoin prices:&amp;lt;br&amp;gt;{{Value1}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create the action and finish with the applet&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When creating this applet you will have to authorize the IFTTT Telegram bot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting It All Together&lt;/h2&gt;
&lt;p&gt;Now that we have IFTTT out of the way, let&amp;rsquo;s start coding! You&amp;rsquo;ll start by creating the standard Python command-line app skeleton shown below. Take this code and save it in a file called &lt;code&gt;bitcoin_notifications.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we have to translate the two previous Python console sessions into two functions that will return the latest Bitcoin price and post to the IFTTT webhook respectively. Add the following functions above the main function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITCOIN_API_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://api.coinmarketcap.com/v1/ticker/bitcoin/'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IFTTT_WEBHOOKS_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maker.ifttt.com/trigger/{}/with/key/{your-IFTTT-key}'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_latest_bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITCOIN_API_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Convert the price to a floating point number&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'price_usd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_ifttt_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The payload that will be sent to IFTTT service&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# inserts our desired event&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ifttt_event_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFTTT_WEBHOOKS_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Sends a HTTP POST request to the webhook URL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifttt_event_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;get_latest_bitcoin_price&lt;/code&gt; is pretty much the same, except for the part where we have to convert the price from a string to a floating point number. The &lt;code&gt;post_ifttt_webhook&lt;/code&gt; takes in two parameters: &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;event&lt;/code&gt; parameter corresponds to whatever event name we gave to our trigger when setting up the IFTTT applet. Also, the IFTTT webhooks allow us to send additional data along with the request as JSON-formatted data.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why we need the &lt;code&gt;value&lt;/code&gt; parameter: When setting up our applets we left a &lt;code&gt;{{Value1}}&lt;/code&gt; tag in our message fields. This tag is replaced with the &lt;code&gt;'value1'&lt;/code&gt; text from the JSON payload. The &lt;code&gt;requests.post()&lt;/code&gt; function allows us to send additional JSON data just by adding the &lt;code&gt;json&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;Now we can move on to the core of our app in the &lt;code&gt;main&lt;/code&gt; function. It will consist of a &lt;code&gt;while True&lt;/code&gt; loop since we want our app to run forever. In the loop
we will call the Coinmarketcap API to get the latest Bitcoin price and record the current date and time. &lt;/p&gt;
&lt;p&gt;Based on the current price we will decide if we want to send an emergency notification. For our regular Telegram updates we will also append the current price and date to a &lt;code&gt;bitcoin_history&lt;/code&gt; list. Once the list reaches a certain number of items (e.g. 5) we will format the items, send the update to Telegram, and reset the history for future updates.&lt;/p&gt;
&lt;p&gt;Wheew! As you can see, there&amp;rsquo;s a lot going on in this app. If you&amp;rsquo;re having trouble following the code we&amp;rsquo;ve got thus far then take a quick break and re-read the above section again slowly. This stuff isn&amp;rsquo;t easy, so take your time and don&amp;rsquo;t worry about getting everything perfect the first time around.&lt;/p&gt;
&lt;p&gt;An important thing is to avoid sending out these requests too frequently, for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Coinmarketcap API states that they update the data only once every 5 minutes, so there&amp;rsquo;s no point in reloading the latest pricing info more frequently than that&lt;/li&gt;
&lt;li&gt;if your app sends too many requests to the Coinmarketcap API your IP might get banned or temporarily suspended.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is why we need to &amp;ldquo;go to sleep&amp;rdquo; (stop the execution of the loop) for at least 5 minutes before we get new data. The code below implements all of the required features I stated above:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITCOIN_PRICE_THRESHOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Set this to whatever you like&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_latest_bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Send an emergency notification&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BITCOIN_PRICE_THRESHOLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post_ifttt_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bitcoin_price_emergency'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Send a Telegram notification&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Once we have 5 items in our bitcoin_history send an update&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post_ifttt_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bitcoin_price_update'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                               &lt;span class=&quot;n&quot;&gt;format_bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Reset the history&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Sleep for 5 minutes &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (For testing purposes you can set it to a lower number)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re almost done! The only thing missing is the &lt;code&gt;format_bitcoin_history&lt;/code&gt; function. It takes the &lt;code&gt;bitcoin_history&lt;/code&gt; as an argument
and formats it using some of the basic HTML tags allowed by Telegram, like &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;, and so on. Copy this function
above the &lt;code&gt;main&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_price&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Formats the date into a string: '24.02.2018 15:09'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.%m.%Y %H:%M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# &amp;lt;b&amp;gt; (bold) tag creates bolded text&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 24.02.2018 15:09: $&amp;lt;b&amp;gt;10123.4&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{}: $&amp;lt;b&amp;gt;{}&amp;lt;/b&amp;gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Use a &amp;lt;br&amp;gt; (break) tag to create a new line&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Join the rows delimited by &amp;lt;br&amp;gt; tag: row1&amp;lt;br&amp;gt;row2&amp;lt;br&amp;gt;row3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what the end result should look like on your phone:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/bitcoin_telegram.1a228cd2b5eb.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/bitcoin_telegram.1a228cd2b5eb.png&quot; width=&quot;256&quot; height=&quot;134&quot; alt=&quot;Python + IFTTT: Bitcoin Telegram&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To run your price notification app, execute the following in your command-line terminal:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; python bitcoin_notifications.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s it! In little over 50 lines of Python code, you&amp;rsquo;ve created your very own Bitcoin notification service. Congratulations! Below I&amp;rsquo;ve added
the entire code so you can compare and see if you&amp;rsquo;ve missed anything:&lt;/p&gt;
&lt;div class=&quot;card mb-3&quot; id=&quot;exercises_card8f4c4b&quot;&gt;
&lt;div class=&quot;card-header border-0&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&lt;button class=&quot;btn&quot;&gt;Solution: Python + IFTTT Bitcoin Price Notifier&lt;/button&gt; &lt;button class=&quot;btn btn-link float-right&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;exercises8f4c4b&quot; class=&quot;collapse&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;BITCOIN_PRICE_THRESHOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BITCOIN_API_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://api.coinmarketcap.com/v1/ticker/bitcoin/'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IFTTT_WEBHOOKS_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maker.ifttt.com/trigger/{}/with/key/{your-IFTTT-key}'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_latest_bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITCOIN_API_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'price_usd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Convert the price to a floating point number&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_ifttt_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# The payload that will be sent to IFTTT service&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ifttt_event_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFTTT_WEBHOOKS_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Inserts our desired event&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifttt_event_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Sends a HTTP POST request to the webhook URL&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_price&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.%m.%Y %H:%M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Formats the date into a string: '24.02.2018 15:09'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# &amp;lt;b&amp;gt; (bold) tag creates bolded text&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{}: $&amp;lt;b&amp;gt;{}&amp;lt;/b&amp;gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 24.02.2018 15:09: $&amp;lt;b&amp;gt;10123.4&amp;lt;/b&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Use a &amp;lt;br&amp;gt; (break) tag to create a new line&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Join the rows delimited by &amp;lt;br&amp;gt; tag: row1&amp;lt;br&amp;gt;row2&amp;lt;br&amp;gt;row3&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_latest_bitcoin_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Send an emergency notification&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BITCOIN_PRICE_THRESHOLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post_ifttt_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bitcoin_price_emergency'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Send a Telegram notification&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Once we have 5 items in our bitcoin_history send an update&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post_ifttt_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bitcoin_price_update'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Reset the history&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bitcoin_history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Sleep for 5 minutes (for testing purposes you can set it to a lower number)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h2 id=&quot;recap-and-next-steps&quot;&gt;Recap and Next Steps&lt;/h2&gt;
&lt;p&gt;In this article, we created our very own Bitcoin notification service. You learned how to send HTTP GET and POST requests using the &lt;code&gt;requests&lt;/code&gt; package. You saw how easy it was to connect your Python app to external services using IFTTT and webhooks.&lt;/p&gt;
&lt;p&gt;Now, where should you go next? With Python and IFTTT the sky is the limit. But here are some suggestions that can get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Like spreadsheets? Use an IFTTT action that will add the Bitcoin prices to a Google Spreadsheet&lt;/li&gt;
&lt;li&gt;Improve the &lt;code&gt;if price &amp;lt; BITCOIN_PRICE_THRESHOLD&lt;/code&gt; condition to get the notification only once per day (otherwise it will get quite annoying if Bitcoin is consistently low)&lt;/li&gt;
&lt;li&gt;Like Ethereum/Litecoin/Dogecoin better? Change the &lt;code&gt;get_latest_bitcoin_price&lt;/code&gt; to &lt;code&gt;get_latest_cryptocurrency_price&lt;/code&gt; that will take a cryptocurrency as a parameter and return its price&lt;/li&gt;
&lt;li&gt;You want the price in a different currency? Check the Coinmarketcap API for the &lt;code&gt;convert&lt;/code&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, this will be an ongoing series with more Python projects you can build to grow your skills. Don&amp;rsquo;t miss out on the next tutorial:&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Get Notified:&lt;/strong&gt; Don't miss the follow up to this tutorial—&lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Click here to join the Real Python Newsletter&lt;/a&gt; and you'll know when the next instalment comes out.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Good luck and Happy Pythoning! Let me know what you&amp;rsquo;ve built using Python and IFTTT in the comments below!&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 08 Mar 2018 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python Variables, Constants and Literals</title>
	<guid>https://www.programiz.com/python-programming/variables-constants-literals</guid>
	<link>https://www.programiz.com/python-programming/variables-constants-literals</link>
	<description>In this article, you will learn about Python variables, constants, literals and their use cases.</description>
	<pubDate>Thu, 08 Mar 2018 06:42:38 +0000</pubDate>
</item>
<item>
	<title>Codementor: Data science with Python: Turn your conditional loops to Numpy vectors</title>
	<guid>https://www.codementor.io/tirthajyotisarkar/data-science-with-python-turn-your-conditional-loops-to-numpy-vectors-he1yo9265</guid>
	<link>https://www.codementor.io/tirthajyotisarkar/data-science-with-python-turn-your-conditional-loops-to-numpy-vectors-he1yo9265</link>
	<description>Vectorization trick is fairly well-known to data scientists and is used routinely in coding, to speed up the overall data transformation, where simple mathematical transformations are performed over an iterable object e.g. a list. What is less appreciated is that it even pays to vectorize non-trivial code blocks such as conditional loops.</description>
	<pubDate>Thu, 08 Mar 2018 04:17:33 +0000</pubDate>
</item>
<item>
	<title>Trey Hunner: Multiple assignment and tuple unpacking improve Python code readability</title>
	<guid>http://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability/</guid>
	<link>http://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability/</link>
	<description>&lt;p&gt;Whether I&amp;rsquo;m teaching new Pythonistas or long-time Python programmers, I frequently find that &lt;strong&gt;Python programmers underutilize multiple assignment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Multiple assignment (also known as tuple unpacking or iterable unpacking) allows you to assign multiple variables at the same time in one line of code.
This feature often seems simple after you&amp;rsquo;ve learned about it, but &lt;strong&gt;it can be tricky to recall multiple assignment when you need it most&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article we&amp;rsquo;ll see what multiple assignment is, we&amp;rsquo;ll take a look at common uses of multiple assignment, and then we&amp;rsquo;ll look at a few uses for multiple assignment that are often overlooked.&lt;/p&gt;

&lt;p&gt;Note that in this article I will be using &lt;a href=&quot;https://cito.github.io/blog/f-strings/&quot;&gt;f-strings&lt;/a&gt; which are a Python 3.6+ feature.
If you&amp;rsquo;re on an older version of Python, you&amp;rsquo;ll need to mentally translate those to use the string &lt;code&gt;format&lt;/code&gt; method.&lt;/p&gt;

&lt;h2&gt;How multiple assignment works&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll be using the words &lt;strong&gt;multiple assignment&lt;/strong&gt;, &lt;strong&gt;tuple unpacking&lt;/strong&gt;, and &lt;strong&gt;iterable unpacking&lt;/strong&gt; interchangeably in this article.
They&amp;rsquo;re all just different words for the same thing.&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s multiple assignment looks like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Here we&amp;rsquo;re setting &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;20&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s happening at a lower level is that we&amp;rsquo;re creating a tuple of &lt;code&gt;10, 20&lt;/code&gt; and then looping over that tuple and taking each of the two items we get from looping and assigning them to &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in order.&lt;/p&gt;

&lt;p&gt;This syntax might make that a bit more clear:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Parenthesis are optional around tuples in Python and they&amp;rsquo;re also optional in multiple assignment (which uses a tuple-like syntax).
All of these are equivalent:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Multiple assignment is often called &amp;ldquo;tuple unpacking&amp;rdquo; because it&amp;rsquo;s frequently used with tuples.
But we can use multiple assignment with any iterable, not just tuples.
Here we&amp;rsquo;re using it with a list:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;And with a string:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hi'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;'h'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;'i'&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Anything that can be looped over can be &amp;ldquo;unpacked&amp;rdquo; with tuple unpacking / multiple assignment.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another example to demonstrate that multiple assignment works with any number of items and that it works with variables as well as objects we&amp;rsquo;ve just created:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;10 20 30&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;30 20 10&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Note that on that last line we&amp;rsquo;re actually swapping variable names, which is something multiple assignment allows us to do easily.&lt;/p&gt;

&lt;p&gt;Alright, let&amp;rsquo;s talk about how multiple assignment can be used.&lt;/p&gt;

&lt;h2&gt;Unpacking in a for loop&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll commonly see multiple assignment used in &lt;code&gt;for&lt;/code&gt; loops.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a dictionary:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person_dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Trey&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'company'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Truthful Technology LLC&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Instead of looping over our dictionary like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person_dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Key {item[0]} has value {item[1]}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;You&amp;rsquo;ll often see Python programmers use multiple assignment by writing this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person_dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Key {key} has value {value}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;When you write the &lt;code&gt;for X in Y&lt;/code&gt; line of a for loop, you&amp;rsquo;re telling Python that it should do an assignment to &lt;code&gt;X&lt;/code&gt; for each iteration of your loop.
Just like in an assignment using the &lt;code&gt;=&lt;/code&gt; operator, we can use multiple assignment here.&lt;/p&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person_dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Key {key} has value {value}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Is essentially the same as this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person_dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Key {key} has value {value}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re just not doing an unnecessary extra assignment in the first example.&lt;/p&gt;

&lt;p&gt;So multiple assignment is great for unpacking dictionary items into key-value pairs, but it&amp;rsquo;s helpful in many other places too.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s great when paired with the built-in &lt;code&gt;enumerate&lt;/code&gt; function:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Line {i}: {line}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;And the &lt;code&gt;zip&lt;/code&gt; function:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ratio&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ratios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;It's {ratio*100}% {color}.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;




&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{product} is {color} and costs ${price:.2f}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;rsquo;re unfamiliar with &lt;code&gt;enumerate&lt;/code&gt; or &lt;code&gt;zip&lt;/code&gt;, see my article on &lt;a href=&quot;http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/&quot;&gt;looping with indexes in Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Newer Pythonistas often see multiple assignment in the context of &lt;code&gt;for&lt;/code&gt; loops and sometimes assume it&amp;rsquo;s tied to loops.  Multiple assignment works for any assignment though, not just loop assignments.&lt;/p&gt;

&lt;h2&gt;An alternative to hard coded indexes&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s not uncommon to see hard coded indexes (e.g. &lt;code&gt;point[0]&lt;/code&gt;, &lt;code&gt;items[1]&lt;/code&gt;, &lt;code&gt;vals[-1]&lt;/code&gt;) in code:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The first item is {items[0]} and the last item is {items[-1]}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;When you see Python code that uses hard coded indexes there&amp;rsquo;s often a way to &lt;strong&gt;use multiple assignment to make your code more readable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some code that has three hard coded indexes:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reformat_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdy_date_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Reformat MM/DD/YYYY string into YYYY-MM-DD string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdy_date_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{date[2]}-{date[0]}-{date[1]}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;We can make this code much more readable by using multiple assignment to assign separate month, day, and year variables:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reformat_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdy_date_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Reformat MM/DD/YYYY string into YYYY-MM-DD string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdy_date_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{year}-{month}-{day}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Whenever you see hard coded indexes in your code, stop to consider whether you could use multiple assignment to make your code more readable.&lt;/p&gt;

&lt;h2&gt;Multiple assignment is very strict&lt;/h2&gt;

&lt;p&gt;Multiple assignment is actually fairly strict when it comes to unpacking the iterable we give to it.&lt;/p&gt;

&lt;p&gt;If we try to unpack a larger iterable into a smaller number of variables, we&amp;rsquo;ll get an error:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gr&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;too many values to unpack (expected 2)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;If we try to unpack a smaller iterable into a larger number of variables, we&amp;rsquo;ll also get an error:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gr&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;not enough values to unpack (expected 3, got 2)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;This strictness is pretty great.
If we&amp;rsquo;re working with an item that has a different size than we expected, the multiple assignment will fail loudly and we&amp;rsquo;ll hopefully now know about a bug in our program that we weren&amp;rsquo;t yet aware of.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example.
Imagine that we have a short command line program that parses command-line arguments in a rudimentary way, like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;old_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Copying {new_file} to {old_file}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Our program is supposed to accept 2 arguments, like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my_program.py file1.txt file2.txt
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;Copying file1.txt to file2.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But if someone called our program with three arguments, they will not see an error:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my_program.py file1.txt file2.txt file3.txt
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;Copying file1.txt to file2.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s no error because we&amp;rsquo;re not validating that we&amp;rsquo;ve received exactly 2 arguments.&lt;/p&gt;

&lt;p&gt;If we use multiple assignment instead of hard coded indexes, the assignment will verify that we receive exactly the expected number of arguments:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Copying {new_file} to {old_file}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: we&amp;rsquo;re using the variable name &lt;code&gt;_&lt;/code&gt; to note that we don&amp;rsquo;t care about &lt;code&gt;sys.argv[0]&lt;/code&gt; (the name of our program).
Using &lt;code&gt;_&lt;/code&gt; for variables you don&amp;rsquo;t care about is just a convention.&lt;/p&gt;

&lt;h2&gt;An alternative to slicing&lt;/h2&gt;

&lt;p&gt;So multiple assignment can be used for avoiding hard coded indexes and it can be used to ensure we&amp;rsquo;re strict about the size of the tuples/iterables we&amp;rsquo;re working with.&lt;/p&gt;

&lt;p&gt;Multiple assignment can be used to replace hard coded slices too!&lt;/p&gt;

&lt;p&gt;Slicing is a handy way to grab a specific portion of the items in lists and other sequences.&lt;/p&gt;

&lt;p&gt;Here are some slices that are &amp;ldquo;hard coded&amp;rdquo; in that they only use numeric indexes:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_after_first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_but_last_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items_with_ends_removed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Whenever you see slices that don&amp;rsquo;t use any variables in their slice indexes, you can often use multiple assignment instead.
To do this we have to talk about a feature that I haven&amp;rsquo;t mentioned yet: the &lt;code&gt;*&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;In Python 3.0, the &lt;code&gt;*&lt;/code&gt; operator was added to the multiple assignment syntax, allowing us to capture remaining items after an unpacking into a list:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;[2, 3, 4, 5, 6]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; operator allows us to replace hard coded slices near the ends of sequences.&lt;/p&gt;

&lt;p&gt;These two lines are equivalent:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;These two lines are equivalent also:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;With the &lt;code&gt;*&lt;/code&gt; operator and multiple assignment you can replace things like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;With more descriptive code, like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;program_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;So if you see hard coded slice indexes in your code, consider whether you could use multiple assignment to clarify what those slices really represent.&lt;/p&gt;

&lt;h2&gt;Deep unpacking&lt;/h2&gt;

&lt;p&gt;This next feature is something that long-time Python programmers often overlook.
It doesn&amp;rsquo;t come up quite as often as the other uses for multiple assignment that I&amp;rsquo;ve discussed, but it can be very handy to know about when you do need it.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve seen multiple assignment for unpacking tuples and other iterables.
We haven&amp;rsquo;t yet seen that this is can be done &lt;em&gt;deeply&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d say that the following multiple assignment is &lt;em&gt;shallow&lt;/em&gt; because it unpacks one level deep:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;'red'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;(1, 2, 3)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;And I&amp;rsquo;d say that this multiple assignment is &lt;em&gt;deep&lt;/em&gt; because it unpacks the previous &lt;code&gt;point&lt;/code&gt; tuple further into &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; variables:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;'red'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;If it seems confusing what&amp;rsquo;s going on above, maybe using parenthesis consistently on both sides of this assignment will help clarify things:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re unpacking one level deep to get two objects, but then we take the second object and unpack it also to get 3 more objects.
Then we assign our first object and our thrice-unpacked second object to our new variables (&lt;code&gt;color&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Take these two lists:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;start_points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;end_points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s an example of code that works with these lists by using shallow unpacking:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Point {start[0]},{start[1]} was negated.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;And here&amp;rsquo;s the same thing with deeper unpacking:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Point {x1},{y1} was negated.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Note that in this second case, it&amp;rsquo;s much more clear what type of objects we&amp;rsquo;re working with.
The deep unpacking makes it apparent that we&amp;rsquo;re receiving two 2-itemed tuples each time we loop.&lt;/p&gt;

&lt;p&gt;Deep unpacking often comes up when nesting looping utilities that each provide multiple items.
For example, you may see deep multiple assignments when using &lt;code&gt;enumerate&lt;/code&gt; and &lt;code&gt;zip&lt;/code&gt; together:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Item {i} doesn't match: {first} != {last}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;I said before that multiple assignment is strict about the size of our iterables as we unpack them.
With deep unpacking we can also be &lt;strong&gt;strict about the shape of our iterables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This works:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But this buggy code works too:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Whereas this works:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But this does not:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gr&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;too many values to unpack (expected 2)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;With multiple assignment we&amp;rsquo;re assigning variables while also making particular assertions about the size and shape of our iterables.
Multiple assignment will help you clarify your code to both humans (for &lt;strong&gt;better code readability&lt;/strong&gt;) and to computers (for &lt;strong&gt;improved code correctness&lt;/strong&gt;).&lt;/p&gt;

&lt;h2&gt;Using a list-like syntax&lt;/h2&gt;

&lt;p&gt;I noted before that multiple assignment uses a tuple-like syntax, but it works on any iterable.
That tuple-like syntax is the reason it&amp;rsquo;s commonly called &amp;ldquo;tuple unpacking&amp;rdquo; even though it might be more clear to say &amp;ldquo;iterable unpacking&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t mention before that multiple assignment also works with &lt;strong&gt;a list-like syntax&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a multiple assignment with a list-like syntax:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;This might seem really strange. What&amp;rsquo;s the point of allowing both list-like and tuple-like syntaxes?&lt;/p&gt;

&lt;p&gt;I use this feature rarely, but I find it helpful for &lt;strong&gt;code clarity&lt;/strong&gt; in specific circumstances.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say I have code that used to look like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;And our well-intentioned coworker has decided to use deep multiple assignment to refactor our code to this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;See that trailing comma on the left-hand side of the assignment?
It&amp;rsquo;s easy to miss and it makes this code look sort of weird.
What is that comma even doing in this code?&lt;/p&gt;

&lt;p&gt;That trailing comma is there to make a single item tuple.
We&amp;rsquo;re doing deep unpacking here.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another way we could write the same code:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;This might make that deep unpacking a little more obvious but I&amp;rsquo;d prefer to see this instead:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;The list-syntax in our assignment makes it more clear that we&amp;rsquo;re unpacking a one-item iterable and then unpacking that single item into &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;times_seen&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;When I see this, I also think &lt;em&gt;I bet we&amp;rsquo;re unpacking a single-item list&lt;/em&gt;.
And that is in fact what we&amp;rsquo;re doing.
We&amp;rsquo;re using a &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.Counter&quot;&gt;Counter&lt;/a&gt; object from the collections module here.
The &lt;code&gt;most_common&lt;/code&gt; method on &lt;code&gt;Counter&lt;/code&gt; objects allows us to limit the length of the list returned to us.
We&amp;rsquo;re limiting the list we&amp;rsquo;re getting back to just a single item.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re unpacking structures that often hold lots of values (like lists) and structures that often hold a very specific number of values (like tuples) you may decide that your code appears more &lt;em&gt;semantically accurate&lt;/em&gt; if you use a list-like syntax when unpacking those list-like structures.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like you might even decide to adopt a convention of always using a list-like syntax when unpacking list-like structures (frequently the case when using &lt;code&gt;*&lt;/code&gt; in multiple assignment):&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;I don&amp;rsquo;t usually use this convention myself, mostly because I&amp;rsquo;m just not in the habit of using it.
But if you find it helpful, you might consider using this convention in your own code.&lt;/p&gt;

&lt;p&gt;When using multiple assignment in your code, consider when and where a list-like syntax might make your code more descriptive and more clear.
This can sometimes improve readability.&lt;/p&gt;

&lt;h2&gt;Don&amp;rsquo;t forget about multiple assignment&lt;/h2&gt;

&lt;p&gt;Multiple assignment can improve both the readability of your code and the correctness of your code.
It can make your code &lt;strong&gt;more descriptive&lt;/strong&gt; while also making implicit assertions about the &lt;strong&gt;size and shape&lt;/strong&gt; of the iterables you&amp;rsquo;re unpacking.&lt;/p&gt;

&lt;p&gt;The use for multiple assignment that I often see forgotten is its ability to &lt;strong&gt;replace hard coded indexes&lt;/strong&gt;, including &lt;strong&gt;replacing hard coded slices&lt;/strong&gt; (using the &lt;code&gt;*&lt;/code&gt; syntax).
It&amp;rsquo;s also common to overlook the fact that multiple assignment works &lt;em&gt;deeply&lt;/em&gt; and can be used with both a &lt;em&gt;tuple-like&lt;/em&gt; syntax and a &lt;em&gt;list-like&lt;/em&gt; syntax.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s tricky to recognize and remember all the cases that multiple assignment can come in handy.
Please feel free to use this article as your personal reference guide to multiple assignment.&lt;/p&gt;</description>
	<pubDate>Thu, 08 Mar 2018 00:30:00 +0000</pubDate>
</item>
<item>
	<title>Mauveweb: Pyweek Game Jam, Episode 25</title>
	<guid>http://mauveweb.co.uk/posts/2018/03/pyweek-25.html</guid>
	<link>http://mauveweb.co.uk/posts/2018/03/pyweek-25.html</link>
	<description>&lt;div&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pyweek.org/25/&quot;&gt;Pyweek 25&lt;/a&gt; has been announced for the 15th-21st April this year!&lt;/p&gt;

Pyweek logo
&lt;p&gt;Pyweek is a week-long game jam, in which you must write a game from scratch, in
Python, in just one week.&lt;/p&gt;
&lt;p&gt;It's online, so you can participate from the comfort of your own home (or bed,
if you're extra lazy). Games are rated by other entrants, which means you're
guaranteed to get useful feedback on your game, even if you don't win.&lt;/p&gt;
&lt;p&gt;Wow, &lt;strong&gt;25 Pyweeks, over 13 years!&lt;/strong&gt; So far, 972 complete Python games have been
submitted. It's something of a tradition in the Python community. It's a very
social event. Other entrants are encouraged to write &quot;diaries&quot; about their
progress so you can see their games evolve and see how they solve the problems
they encounter.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.pygame.org/&quot;&gt;Pygame&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://pyglet.readthedocs.io/&quot;&gt;Pyglet&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;http://python.cocos2d.org/&quot;&gt;Cocos2D&lt;/a&gt; - even &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/touilleMan/godot-python&quot;&gt;Godot&lt;/a&gt;: there are many libraries in Python
for creating games. If you're a beginner, I would recommend &lt;a class=&quot;reference external&quot; href=&quot;http://pygame-zero.readthedocs.io/&quot;&gt;Pygame Zero&lt;/a&gt;,
my easy game framework for beginners. You can also use your own library, but it
needs to be &lt;strong&gt;published&lt;/strong&gt; and &lt;strong&gt;well-documented&lt;/strong&gt; 30 days before the contest
starts, so roughly in a week from now. Get documenting and uploading!&lt;/p&gt;
&lt;p&gt;Why participate in Pyweek? There are many reasons:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Practice your Python programming&lt;/li&gt;
&lt;li&gt;Try programming something different&lt;/li&gt;
&lt;li&gt;Unleash your creativity&lt;/li&gt;
&lt;li&gt;Finish a real project&lt;/li&gt;
&lt;li&gt;Maybe, just &lt;em&gt;maybe&lt;/em&gt;, you could win and get all the kudos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, why not give it a go? Here's what happens next:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;Register an account on &lt;a class=&quot;reference external&quot; href=&quot;https://pyweek.org/&quot;&gt;https://pyweek.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Submit an entry using the drop-down at the top right under your username.&lt;/li&gt;
&lt;li&gt;At &lt;strong&gt;00:00 UTC on 2018-04-08&lt;/strong&gt;, visit the website to find the 5 potential
themes. You have a week to think about the themes and decide which you like
best.&lt;/li&gt;
&lt;li&gt;Submit your votes for the themes in order of preference.&lt;/li&gt;
&lt;li&gt;At &lt;strong&gt;00:00 UTC on 2018-04-15&lt;/strong&gt;, we find out which theme has won, and coding
begins! You now have exactly 168 hours to write a game on the theme that
was selected!&lt;/li&gt;
&lt;li&gt;At &lt;strong&gt;00:00 UTC on 2018-04-22&lt;/strong&gt;, everyone must stop coding. You now have 24
hours to upload your game.&lt;/li&gt;
&lt;li&gt;Then you can relax, and start playing the other games. You can rate the
other games on three criteria: &lt;strong&gt;fun&lt;/strong&gt;, &lt;strong&gt;production&lt;/strong&gt;, and &lt;strong&gt;innovation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;At &lt;strong&gt;00:00 UTC on 2018-05-06&lt;/strong&gt;, the winners are announced. If you don't win
first time, don't worry! Hopefully you'll learn loads of things and come
back with better ideas next time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Good luck! Hope to see you there!&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 08 Mar 2018 00:27:53 +0000</pubDate>
</item>
<item>
	<title>Red Hat Developers: Introducing conu – Scripting Containers Made Easier</title>
	<guid>https://developers.redhat.com/blog/2018/03/07/introducing-conu-scripting-containers-made-easier/</guid>
	<link>https://developers.redhat.com/blog/2018/03/07/introducing-conu-scripting-containers-made-easier/</link>
	<description>&lt;p&gt;There has been a need for a simple, easy-to-use handler for writing tests and other code around containers that would implement helpful methods and utilities. For this we introduce &lt;a href=&quot;http://conu.readthedocs.io/en/latest/&quot;&gt;conu&lt;/a&gt;, a low-level &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;This project has been driven from the start by the requirements of container maintainers and testers. In addition to basic image and container management methods, it provides other often used functions, such as container mount, shortcut methods for getting an IP address, exposed ports, logs, name, image extending using &lt;a href=&quot;https://github.com/openshift/source-to-image&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;source-to-image,&lt;/a&gt; and many others.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-458857&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;conu aims for stable engine-agnostic APIs that would be implemented by several container runtime back-ends. Switching between two different container engines should require only minimum effort. When used for testing, one set of tests could be executed for multiple back-ends.&lt;/p&gt;
&lt;h2&gt;Hello world&lt;/h2&gt;
&lt;p&gt;In the following example there is a snippet of code in which we run a container from a specified image, check its output, and gracefully delete.&lt;/p&gt;
&lt;p&gt;We have decided our desired container runtime would be docker (now the only fully implemented container runtime). The image is run with an instance of DockerRunBuilder, which is the way to set additional options and custom commands for the docker container run command.&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;
import conu, logging

def check_output(image, message):
    command_build = conu.DockerRunBuilder(command=['echo', message])
    container = image.run_via_binary(command_build)

    try:
        # check_output
        assert container.logs_unicode() == message + '\n'
    finally:
        #cleanup
        container.stop()
        container.delete()

if __name__ == '__main__':
    with conu.DockerBackend(logging_level=logging.DEBUG) as backend:
        image = backend.ImageClass('registry.access.redhat.com/rhscl/httpd-24-rhel7')
        check_output(image, message='Hello World!')
&lt;/pre&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;Get http response&lt;/h2&gt;
&lt;p&gt;When dealing with containers that run as services, the container state ‘Running’ is often not enough. We need to check that its port is open and ready to serve, and also to send custom requests to it.&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;
def check_container_port(image):
    &amp;quot;&amp;quot;&amp;quot;
    run container and wait for successful
    response from the service exposed via port 8080
    &amp;quot;&amp;quot;&amp;quot;
    port=8080
    container = image.run_via_binary()
    container.wait_for_port(port)

    # check httpd runs
    http_response = container.http_request(port=port)
    assert http_response.ok

    # cleanup
    container.delete(force=True)
&lt;/pre&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;Look inside the container filesystem&lt;/h2&gt;
&lt;p&gt;To check presence and content of the configuration files, conu provides a way to easily mount the container filesystem with a predefined set of useful methods. The mount is in read-only mode, but we plan to also implement read-write modes in the next releases.&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;
def mount_container_filesystem(image):
    # run httpd container
    container = image.run_via_binary()

    # mount container filesystem
    with container.mount() as fs:
        # check presence of httpd configuration file
        assert fs.file_is_present('/etc/httpd/conf/httpd.conf')

        # check presence of default httpd index page
        index_path = ‘/opt/rh/httpd24/root/usr/share/httpd/noindex/index.html’
        assert fs.file_is_present(index_path)

        # and its content
        index_text = fs.read_file(index_path)
&lt;/pre&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;So why not just use docker-py?&lt;/h2&gt;
&lt;p&gt;Aside from docker, conu also aims to support other container runtimes by providing a generic API. To implement the docker back-end, conu actually uses docker-py. Conu also implements other utilities that are generally used when dealing with containers. Adopting other utilities should be also simple.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;And what about container testing frameworks?&lt;/h2&gt;
&lt;p&gt;You don’t have to be limited by a specified a set of tests. When writing code with conu, you can acquire ports, sockets, and filesystems, and the only limits you have are the ones set by Python. In the cases where conu does not support certain features and you don’t want to deal with a subprocess, there is a run_cmd utility that helps you simply run the desired command.&lt;/p&gt;
&lt;p&gt;We are reaching out to you to gather feedback and encourage contribution to conu to make scripting around containers even more efficient. We have already successfully used conu for several image tests (for example &lt;a href=&quot;https://github.com/container-images/postgresql/tree/master/test&quot;&gt;here&lt;/a&gt;), and it also helped while implementing clients for executing specific kinds of containers.&lt;/p&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;http://conu.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;conu documentation&lt;/a&gt; or &lt;a href=&quot;https://github.com/fedora-modularity/conu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;Facebook&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;Twitter&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_google_plus&quot; href=&quot;https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;Google+&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_linkedin&quot; href=&quot;https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;LinkedIn&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_email&quot; href=&quot;https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;Email&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_print&quot; href=&quot;https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;Print&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_reddit&quot; href=&quot;https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;Reddit&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_flipboard&quot; href=&quot;https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;linkname=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot; title=&quot;Flipboard&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F03%2F07%2Fintroducing-conu-scripting-containers-made-easier%2F&amp;title=Introducing%20conu%20%E2%80%93%20Scripting%20Containers%20Made%20Easier&quot;&gt;&lt;img src=&quot;https://static.addtoany.com/buttons/favicon.png&quot; alt=&quot;Share&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://developers.redhat.com/blog/2018/03/07/introducing-conu-scripting-containers-made-easier/&quot;&gt;Introducing conu &amp;#8211; Scripting Containers Made Easier&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://developers.redhat.com/blog&quot;&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 07 Mar 2018 17:15:46 +0000</pubDate>
</item>
<item>
	<title>PyCharm: PyCharm 2018.1 EAP 8</title>
	<guid>http://feedproxy.google.com/~r/Pycharm/~3/EtdwKMG0OGQ/</guid>
	<link>http://feedproxy.google.com/~r/Pycharm/~3/EtdwKMG0OGQ/</link>
	<description>&lt;p&gt;This week’s EAP version is now available: &lt;a href=&quot;https://jetbrains.com/pycharm/nextversion&quot;&gt;get it now from our website&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;New in PyCharm&lt;/h1&gt;
&lt;h2&gt;Find tables using the &amp;#8220;Find Class&amp;#8221; window (Pro only)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2018/03/EAP-8-Find-Tables.png&quot; rel=&quot;attachment wp-att-5434&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-5434&quot; src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2018/03/EAP-8-Find-Tables.png&quot; alt=&quot;EAP 8 - Find Tables&quot; width=&quot;565&quot; height=&quot;285&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As some of you might know, PyCharm Professional Edition bundles all features from &lt;a href=&quot;https://jetbrains.com/datagrip&quot;&gt;DataGrip, JetBrains&amp;#8217; SQL IDE&lt;/a&gt;. We&amp;#8217;re making working with databases a little bit easier in PyCharm 2018.1 by including tables in connected databases in the class lookup. If you&amp;#8217;ve configured your database, just use Ctrl+N (or Cmd+O on macOS) to open the &amp;#8216;Find Class&amp;#8217; window, and type the name of your table there.&lt;/p&gt;
&lt;p&gt;If you haven&amp;#8217;t configured your DB yet, you can &lt;a href=&quot;https://www.jetbrains.com/help/pycharm/connecting-to-a-database.html&quot;&gt;learn how to connect PyCharm Professional Edition to a database&lt;/a&gt; with our documentation.&lt;/p&gt;
&lt;h2&gt;Further Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Various improvements to Cython code intelligence.&lt;/li&gt;
&lt;li&gt;Fixes to the support for VueJS (Pro only)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://confluence.jetbrains.com/display/PYH/PyCharm+181.4096.9+Release+Notes&quot;&gt;Read more about new features in the release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Interested?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://jetbrains.com/pycharm/nextversion&quot;&gt;Download this EAP from our website&lt;/a&gt;. Alternatively, you can &lt;a href=&quot;https://jetbrains.com/toolbox/app&quot;&gt;use the JetBrains Toolbox App&lt;/a&gt; to stay up to date throughout the entire EAP.&lt;/p&gt;
&lt;p&gt;If you’re on Ubuntu 16.04 or later, you can use snap to get PyCharm EAP, and stay up to date. You can &lt;a href=&quot;https://jetbrains.com/pycharm/nextversion&quot;&gt;find the installation instructions on our website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PyCharm 2018.1 is in development during the EAP phase, therefore not all new features are already available. More features will be added in the coming weeks. As PyCharm 2018.1 is pre-release software, it is not as stable as the release versions. Furthermore, we may decide to change and/or drop certain features as the EAP progresses.&lt;/p&gt;
&lt;p&gt;All EAP versions will ship with a built-in EAP license, which means that these versions are free to use for 30 days after the day that they are built. As EAPs are released weekly, you’ll be able to use PyCharm Professional Edition EAP for free for the duration of the EAP program, as long as you upgrade at least once every 30 days.&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/Pycharm/~4/EtdwKMG0OGQ&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Wed, 07 Mar 2018 16:54:32 +0000</pubDate>
</item>
<item>
	<title>PyCharm: PyCharm 2016.3 and later updated for GitHub compatibility</title>
	<guid>http://feedproxy.google.com/~r/Pycharm/~3/W16XO1-WHQA/</guid>
	<link>http://feedproxy.google.com/~r/Pycharm/~3/W16XO1-WHQA/</link>
	<description>&lt;p&gt;Recently, GitHub has improved its security by moving to more secure cryptographic algorithms. We&amp;#8217;ve updated all PyCharm versions from 2016.3 and later to be compatible with GitHub&amp;#8217;s new algorithms.&lt;/p&gt;
&lt;p&gt;The new versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyCharm 2017.3.4&lt;/li&gt;
&lt;li&gt;PyCharm 2017.2.5&lt;/li&gt;
&lt;li&gt;PyCharm 2017.1.6&lt;/li&gt;
&lt;li&gt;PyCharm 2016.3.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please update PyCharm to ensure you can continue to use GitHub using PyCharm&amp;#8217;s integration. You can &lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot;&gt;download the latest version of PyCharm&lt;/a&gt; from our website. If you have a perpetual license to an older version, you can &lt;a href=&quot;https://www.jetbrains.com/pycharm/download/previous.html&quot;&gt;get those from the previous versions page&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/Pycharm/~4/W16XO1-WHQA&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Wed, 07 Mar 2018 11:53:12 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python Object Oriented Programming</title>
	<guid>https://www.programiz.com/python-programming/object-oriented-programming</guid>
	<link>https://www.programiz.com/python-programming/object-oriented-programming</link>
	<description>In this article, you’ll learn about the Object Oriented Programming (OOP) in Python and their fundamental concept with examples.</description>
	<pubDate>Wed, 07 Mar 2018 09:44:46 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python Assert Statement</title>
	<guid>https://www.programiz.com/python-programming/assert-statement</guid>
	<link>https://www.programiz.com/python-programming/assert-statement</link>
	<description>In this article we will learn about assertion in Python using assert.</description>
	<pubDate>Wed, 07 Mar 2018 09:40:08 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python Nested Dictionary</title>
	<guid>https://www.programiz.com/python-programming/nested-dictionary</guid>
	<link>https://www.programiz.com/python-programming/nested-dictionary</link>
	<description>In this article, you’ll learn about nested dictionary in Python. More specifically, you’ll learn to  create nested dictionary, access elements, modify them and so on with the help of examples.</description>
	<pubDate>Wed, 07 Mar 2018 09:36:28 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python Global Keyword</title>
	<guid>https://www.programiz.com/python-programming/global-keyword</guid>
	<link>https://www.programiz.com/python-programming/global-keyword</link>
	<description>In this article, you’ll learn about the global keyword, global variable and when to use global keywords.</description>
	<pubDate>Wed, 07 Mar 2018 09:20:32 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python Global, Local and Nonlocal variables</title>
	<guid>https://www.programiz.com/python-programming/global-local-nonlocal-variables</guid>
	<link>https://www.programiz.com/python-programming/global-local-nonlocal-variables</link>
	<description>In this article, you’ll learn about Python Global Variable, Local Variable, Nonlocal Variable and where to use them.</description>
	<pubDate>Wed, 07 Mar 2018 09:08:32 +0000</pubDate>
</item>
<item>
	<title>Talk Python to Me: #154 Python in Biology and Genomics</title>
	<guid>https://talkpython.fm/episodes/show/154/python-in-biology-and-genomics</guid>
	<link>https://talkpython.fm/episodes/show/154/python-in-biology-and-genomics</link>
	<description>Python is often used in big-data situations. One of the more personal sources of large data sets is our own genetic code. Of course, as Python grows stronger in data science, it's finding its place in biology and genetics.</description>
	<pubDate>Wed, 07 Mar 2018 08:00:00 +0000</pubDate>
</item>

</channel>
</rss>
